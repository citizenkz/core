// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/citizenkz/core/ent/benefitfilter"
	"github.com/citizenkz/core/ent/filter"
	"github.com/citizenkz/core/ent/predicate"
	"github.com/citizenkz/core/ent/userfilter"
)

// FilterUpdate is the builder for updating Filter entities.
type FilterUpdate struct {
	config
	hooks    []Hook
	mutation *FilterMutation
}

// Where appends a list predicates to the FilterUpdate builder.
func (_u *FilterUpdate) Where(ps ...predicate.Filter) *FilterUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *FilterUpdate) SetName(v string) *FilterUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *FilterUpdate) SetNillableName(v *string) *FilterUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetHint sets the "hint" field.
func (_u *FilterUpdate) SetHint(v string) *FilterUpdate {
	_u.mutation.SetHint(v)
	return _u
}

// SetNillableHint sets the "hint" field if the given value is not nil.
func (_u *FilterUpdate) SetNillableHint(v *string) *FilterUpdate {
	if v != nil {
		_u.SetHint(*v)
	}
	return _u
}

// ClearHint clears the value of the "hint" field.
func (_u *FilterUpdate) ClearHint() *FilterUpdate {
	_u.mutation.ClearHint()
	return _u
}

// SetType sets the "type" field.
func (_u *FilterUpdate) SetType(v filter.Type) *FilterUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *FilterUpdate) SetNillableType(v *filter.Type) *FilterUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetValues sets the "values" field.
func (_u *FilterUpdate) SetValues(v []string) *FilterUpdate {
	_u.mutation.SetValues(v)
	return _u
}

// AppendValues appends value to the "values" field.
func (_u *FilterUpdate) AppendValues(v []string) *FilterUpdate {
	_u.mutation.AppendValues(v)
	return _u
}

// AddUserFilterIDs adds the "user_filters" edge to the UserFilter entity by IDs.
func (_u *FilterUpdate) AddUserFilterIDs(ids ...int) *FilterUpdate {
	_u.mutation.AddUserFilterIDs(ids...)
	return _u
}

// AddUserFilters adds the "user_filters" edges to the UserFilter entity.
func (_u *FilterUpdate) AddUserFilters(v ...*UserFilter) *FilterUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserFilterIDs(ids...)
}

// AddBenefitFilterIDs adds the "benefit_filters" edge to the BenefitFilter entity by IDs.
func (_u *FilterUpdate) AddBenefitFilterIDs(ids ...int) *FilterUpdate {
	_u.mutation.AddBenefitFilterIDs(ids...)
	return _u
}

// AddBenefitFilters adds the "benefit_filters" edges to the BenefitFilter entity.
func (_u *FilterUpdate) AddBenefitFilters(v ...*BenefitFilter) *FilterUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBenefitFilterIDs(ids...)
}

// Mutation returns the FilterMutation object of the builder.
func (_u *FilterUpdate) Mutation() *FilterMutation {
	return _u.mutation
}

// ClearUserFilters clears all "user_filters" edges to the UserFilter entity.
func (_u *FilterUpdate) ClearUserFilters() *FilterUpdate {
	_u.mutation.ClearUserFilters()
	return _u
}

// RemoveUserFilterIDs removes the "user_filters" edge to UserFilter entities by IDs.
func (_u *FilterUpdate) RemoveUserFilterIDs(ids ...int) *FilterUpdate {
	_u.mutation.RemoveUserFilterIDs(ids...)
	return _u
}

// RemoveUserFilters removes "user_filters" edges to UserFilter entities.
func (_u *FilterUpdate) RemoveUserFilters(v ...*UserFilter) *FilterUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserFilterIDs(ids...)
}

// ClearBenefitFilters clears all "benefit_filters" edges to the BenefitFilter entity.
func (_u *FilterUpdate) ClearBenefitFilters() *FilterUpdate {
	_u.mutation.ClearBenefitFilters()
	return _u
}

// RemoveBenefitFilterIDs removes the "benefit_filters" edge to BenefitFilter entities by IDs.
func (_u *FilterUpdate) RemoveBenefitFilterIDs(ids ...int) *FilterUpdate {
	_u.mutation.RemoveBenefitFilterIDs(ids...)
	return _u
}

// RemoveBenefitFilters removes "benefit_filters" edges to BenefitFilter entities.
func (_u *FilterUpdate) RemoveBenefitFilters(v ...*BenefitFilter) *FilterUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBenefitFilterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FilterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FilterUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FilterUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FilterUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FilterUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := filter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Filter.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := filter.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Filter.type": %w`, err)}
		}
	}
	return nil
}

func (_u *FilterUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filter.Table, filter.Columns, sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(filter.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Hint(); ok {
		_spec.SetField(filter.FieldHint, field.TypeString, value)
	}
	if _u.mutation.HintCleared() {
		_spec.ClearField(filter.FieldHint, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(filter.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Values(); ok {
		_spec.SetField(filter.FieldValues, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, filter.FieldValues, value)
		})
	}
	if _u.mutation.UserFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.UserFiltersTable,
			Columns: []string{filter.UserFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfilter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserFiltersIDs(); len(nodes) > 0 && !_u.mutation.UserFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.UserFiltersTable,
			Columns: []string{filter.UserFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.UserFiltersTable,
			Columns: []string{filter.UserFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BenefitFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.BenefitFiltersTable,
			Columns: []string{filter.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBenefitFiltersIDs(); len(nodes) > 0 && !_u.mutation.BenefitFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.BenefitFiltersTable,
			Columns: []string{filter.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BenefitFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.BenefitFiltersTable,
			Columns: []string{filter.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FilterUpdateOne is the builder for updating a single Filter entity.
type FilterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FilterMutation
}

// SetName sets the "name" field.
func (_u *FilterUpdateOne) SetName(v string) *FilterUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *FilterUpdateOne) SetNillableName(v *string) *FilterUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetHint sets the "hint" field.
func (_u *FilterUpdateOne) SetHint(v string) *FilterUpdateOne {
	_u.mutation.SetHint(v)
	return _u
}

// SetNillableHint sets the "hint" field if the given value is not nil.
func (_u *FilterUpdateOne) SetNillableHint(v *string) *FilterUpdateOne {
	if v != nil {
		_u.SetHint(*v)
	}
	return _u
}

// ClearHint clears the value of the "hint" field.
func (_u *FilterUpdateOne) ClearHint() *FilterUpdateOne {
	_u.mutation.ClearHint()
	return _u
}

// SetType sets the "type" field.
func (_u *FilterUpdateOne) SetType(v filter.Type) *FilterUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *FilterUpdateOne) SetNillableType(v *filter.Type) *FilterUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetValues sets the "values" field.
func (_u *FilterUpdateOne) SetValues(v []string) *FilterUpdateOne {
	_u.mutation.SetValues(v)
	return _u
}

// AppendValues appends value to the "values" field.
func (_u *FilterUpdateOne) AppendValues(v []string) *FilterUpdateOne {
	_u.mutation.AppendValues(v)
	return _u
}

// AddUserFilterIDs adds the "user_filters" edge to the UserFilter entity by IDs.
func (_u *FilterUpdateOne) AddUserFilterIDs(ids ...int) *FilterUpdateOne {
	_u.mutation.AddUserFilterIDs(ids...)
	return _u
}

// AddUserFilters adds the "user_filters" edges to the UserFilter entity.
func (_u *FilterUpdateOne) AddUserFilters(v ...*UserFilter) *FilterUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserFilterIDs(ids...)
}

// AddBenefitFilterIDs adds the "benefit_filters" edge to the BenefitFilter entity by IDs.
func (_u *FilterUpdateOne) AddBenefitFilterIDs(ids ...int) *FilterUpdateOne {
	_u.mutation.AddBenefitFilterIDs(ids...)
	return _u
}

// AddBenefitFilters adds the "benefit_filters" edges to the BenefitFilter entity.
func (_u *FilterUpdateOne) AddBenefitFilters(v ...*BenefitFilter) *FilterUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBenefitFilterIDs(ids...)
}

// Mutation returns the FilterMutation object of the builder.
func (_u *FilterUpdateOne) Mutation() *FilterMutation {
	return _u.mutation
}

// ClearUserFilters clears all "user_filters" edges to the UserFilter entity.
func (_u *FilterUpdateOne) ClearUserFilters() *FilterUpdateOne {
	_u.mutation.ClearUserFilters()
	return _u
}

// RemoveUserFilterIDs removes the "user_filters" edge to UserFilter entities by IDs.
func (_u *FilterUpdateOne) RemoveUserFilterIDs(ids ...int) *FilterUpdateOne {
	_u.mutation.RemoveUserFilterIDs(ids...)
	return _u
}

// RemoveUserFilters removes "user_filters" edges to UserFilter entities.
func (_u *FilterUpdateOne) RemoveUserFilters(v ...*UserFilter) *FilterUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserFilterIDs(ids...)
}

// ClearBenefitFilters clears all "benefit_filters" edges to the BenefitFilter entity.
func (_u *FilterUpdateOne) ClearBenefitFilters() *FilterUpdateOne {
	_u.mutation.ClearBenefitFilters()
	return _u
}

// RemoveBenefitFilterIDs removes the "benefit_filters" edge to BenefitFilter entities by IDs.
func (_u *FilterUpdateOne) RemoveBenefitFilterIDs(ids ...int) *FilterUpdateOne {
	_u.mutation.RemoveBenefitFilterIDs(ids...)
	return _u
}

// RemoveBenefitFilters removes "benefit_filters" edges to BenefitFilter entities.
func (_u *FilterUpdateOne) RemoveBenefitFilters(v ...*BenefitFilter) *FilterUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBenefitFilterIDs(ids...)
}

// Where appends a list predicates to the FilterUpdate builder.
func (_u *FilterUpdateOne) Where(ps ...predicate.Filter) *FilterUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FilterUpdateOne) Select(field string, fields ...string) *FilterUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Filter entity.
func (_u *FilterUpdateOne) Save(ctx context.Context) (*Filter, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FilterUpdateOne) SaveX(ctx context.Context) *Filter {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FilterUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FilterUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FilterUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := filter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Filter.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := filter.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Filter.type": %w`, err)}
		}
	}
	return nil
}

func (_u *FilterUpdateOne) sqlSave(ctx context.Context) (_node *Filter, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filter.Table, filter.Columns, sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Filter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filter.FieldID)
		for _, f := range fields {
			if !filter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(filter.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Hint(); ok {
		_spec.SetField(filter.FieldHint, field.TypeString, value)
	}
	if _u.mutation.HintCleared() {
		_spec.ClearField(filter.FieldHint, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(filter.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Values(); ok {
		_spec.SetField(filter.FieldValues, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, filter.FieldValues, value)
		})
	}
	if _u.mutation.UserFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.UserFiltersTable,
			Columns: []string{filter.UserFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfilter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserFiltersIDs(); len(nodes) > 0 && !_u.mutation.UserFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.UserFiltersTable,
			Columns: []string{filter.UserFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.UserFiltersTable,
			Columns: []string{filter.UserFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BenefitFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.BenefitFiltersTable,
			Columns: []string{filter.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBenefitFiltersIDs(); len(nodes) > 0 && !_u.mutation.BenefitFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.BenefitFiltersTable,
			Columns: []string{filter.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BenefitFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.BenefitFiltersTable,
			Columns: []string{filter.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Filter{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
