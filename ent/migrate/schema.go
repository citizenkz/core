// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AttemptsColumns holds the columns for the "attempts" table.
	AttemptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "otp", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
	}
	// AttemptsTable holds the schema information for the "attempts" table.
	AttemptsTable = &schema.Table{
		Name:       "attempts",
		Columns:    AttemptsColumns,
		PrimaryKey: []*schema.Column{AttemptsColumns[0]},
	}
	// BenefitsColumns holds the columns for the "benefits" table.
	BenefitsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "bonus", Type: field.TypeString},
		{Name: "video_url", Type: field.TypeString, Nullable: true},
		{Name: "source_url", Type: field.TypeString, Nullable: true},
	}
	// BenefitsTable holds the schema information for the "benefits" table.
	BenefitsTable = &schema.Table{
		Name:       "benefits",
		Columns:    BenefitsColumns,
		PrimaryKey: []*schema.Column{BenefitsColumns[0]},
	}
	// BenefitCategoriesColumns holds the columns for the "benefit_categories" table.
	BenefitCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "benefit_id", Type: field.TypeInt},
		{Name: "category_id", Type: field.TypeInt},
	}
	// BenefitCategoriesTable holds the schema information for the "benefit_categories" table.
	BenefitCategoriesTable = &schema.Table{
		Name:       "benefit_categories",
		Columns:    BenefitCategoriesColumns,
		PrimaryKey: []*schema.Column{BenefitCategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "benefit_categories_benefits_benefit_categories",
				Columns:    []*schema.Column{BenefitCategoriesColumns[1]},
				RefColumns: []*schema.Column{BenefitsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "benefit_categories_categories_benefit_categories",
				Columns:    []*schema.Column{BenefitCategoriesColumns[2]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BenefitFiltersColumns holds the columns for the "benefit_filters" table.
	BenefitFiltersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "value", Type: field.TypeString, Nullable: true},
		{Name: "from", Type: field.TypeString, Nullable: true},
		{Name: "to", Type: field.TypeString, Nullable: true},
		{Name: "benefit_id", Type: field.TypeInt},
		{Name: "filter_id", Type: field.TypeInt},
	}
	// BenefitFiltersTable holds the schema information for the "benefit_filters" table.
	BenefitFiltersTable = &schema.Table{
		Name:       "benefit_filters",
		Columns:    BenefitFiltersColumns,
		PrimaryKey: []*schema.Column{BenefitFiltersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "benefit_filters_benefits_benefit_filters",
				Columns:    []*schema.Column{BenefitFiltersColumns[4]},
				RefColumns: []*schema.Column{BenefitsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "benefit_filters_filters_benefit_filters",
				Columns:    []*schema.Column{BenefitFiltersColumns[5]},
				RefColumns: []*schema.Column{FiltersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
	}
	// FiltersColumns holds the columns for the "filters" table.
	FiltersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "hint", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"DATE_RANGE", "NUMBER_RANGE", "STRING_RANGE"}},
		{Name: "values", Type: field.TypeJSON},
	}
	// FiltersTable holds the schema information for the "filters" table.
	FiltersTable = &schema.Table{
		Name:       "filters",
		Columns:    FiltersColumns,
		PrimaryKey: []*schema.Column{FiltersColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "first_name", Type: field.TypeString, Size: 100},
		{Name: "last_name", Type: field.TypeString, Size: 100},
		{Name: "birth_date", Type: field.TypeTime, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserFiltersColumns holds the columns for the "user_filters" table.
	UserFiltersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "value", Type: field.TypeString},
		{Name: "filter_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// UserFiltersTable holds the schema information for the "user_filters" table.
	UserFiltersTable = &schema.Table{
		Name:       "user_filters",
		Columns:    UserFiltersColumns,
		PrimaryKey: []*schema.Column{UserFiltersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_filters_filters_user_filters",
				Columns:    []*schema.Column{UserFiltersColumns[2]},
				RefColumns: []*schema.Column{FiltersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_filters_users_user_filters",
				Columns:    []*schema.Column{UserFiltersColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AttemptsTable,
		BenefitsTable,
		BenefitCategoriesTable,
		BenefitFiltersTable,
		CategoriesTable,
		FiltersTable,
		UsersTable,
		UserFiltersTable,
	}
)

func init() {
	BenefitCategoriesTable.ForeignKeys[0].RefTable = BenefitsTable
	BenefitCategoriesTable.ForeignKeys[1].RefTable = CategoriesTable
	BenefitFiltersTable.ForeignKeys[0].RefTable = BenefitsTable
	BenefitFiltersTable.ForeignKeys[1].RefTable = FiltersTable
	UserFiltersTable.ForeignKeys[0].RefTable = FiltersTable
	UserFiltersTable.ForeignKeys[1].RefTable = UsersTable
}
