// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/citizenkz/core/ent/child"
	"github.com/citizenkz/core/ent/childfilter"
	"github.com/citizenkz/core/ent/filter"
	"github.com/citizenkz/core/ent/predicate"
)

// ChildFilterUpdate is the builder for updating ChildFilter entities.
type ChildFilterUpdate struct {
	config
	hooks    []Hook
	mutation *ChildFilterMutation
}

// Where appends a list predicates to the ChildFilterUpdate builder.
func (_u *ChildFilterUpdate) Where(ps ...predicate.ChildFilter) *ChildFilterUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetChildID sets the "child_id" field.
func (_u *ChildFilterUpdate) SetChildID(v int) *ChildFilterUpdate {
	_u.mutation.SetChildID(v)
	return _u
}

// SetNillableChildID sets the "child_id" field if the given value is not nil.
func (_u *ChildFilterUpdate) SetNillableChildID(v *int) *ChildFilterUpdate {
	if v != nil {
		_u.SetChildID(*v)
	}
	return _u
}

// SetFilterID sets the "filter_id" field.
func (_u *ChildFilterUpdate) SetFilterID(v int) *ChildFilterUpdate {
	_u.mutation.SetFilterID(v)
	return _u
}

// SetNillableFilterID sets the "filter_id" field if the given value is not nil.
func (_u *ChildFilterUpdate) SetNillableFilterID(v *int) *ChildFilterUpdate {
	if v != nil {
		_u.SetFilterID(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *ChildFilterUpdate) SetValue(v string) *ChildFilterUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *ChildFilterUpdate) SetNillableValue(v *string) *ChildFilterUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetChild sets the "child" edge to the Child entity.
func (_u *ChildFilterUpdate) SetChild(v *Child) *ChildFilterUpdate {
	return _u.SetChildID(v.ID)
}

// SetFilter sets the "filter" edge to the Filter entity.
func (_u *ChildFilterUpdate) SetFilter(v *Filter) *ChildFilterUpdate {
	return _u.SetFilterID(v.ID)
}

// Mutation returns the ChildFilterMutation object of the builder.
func (_u *ChildFilterUpdate) Mutation() *ChildFilterMutation {
	return _u.mutation
}

// ClearChild clears the "child" edge to the Child entity.
func (_u *ChildFilterUpdate) ClearChild() *ChildFilterUpdate {
	_u.mutation.ClearChild()
	return _u
}

// ClearFilter clears the "filter" edge to the Filter entity.
func (_u *ChildFilterUpdate) ClearFilter() *ChildFilterUpdate {
	_u.mutation.ClearFilter()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChildFilterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChildFilterUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChildFilterUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChildFilterUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChildFilterUpdate) check() error {
	if _u.mutation.ChildCleared() && len(_u.mutation.ChildIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChildFilter.child"`)
	}
	if _u.mutation.FilterCleared() && len(_u.mutation.FilterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChildFilter.filter"`)
	}
	return nil
}

func (_u *ChildFilterUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(childfilter.Table, childfilter.Columns, sqlgraph.NewFieldSpec(childfilter.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(childfilter.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   childfilter.ChildTable,
			Columns: []string{childfilter.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   childfilter.ChildTable,
			Columns: []string{childfilter.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   childfilter.FilterTable,
			Columns: []string{childfilter.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   childfilter.FilterTable,
			Columns: []string{childfilter.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{childfilter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChildFilterUpdateOne is the builder for updating a single ChildFilter entity.
type ChildFilterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChildFilterMutation
}

// SetChildID sets the "child_id" field.
func (_u *ChildFilterUpdateOne) SetChildID(v int) *ChildFilterUpdateOne {
	_u.mutation.SetChildID(v)
	return _u
}

// SetNillableChildID sets the "child_id" field if the given value is not nil.
func (_u *ChildFilterUpdateOne) SetNillableChildID(v *int) *ChildFilterUpdateOne {
	if v != nil {
		_u.SetChildID(*v)
	}
	return _u
}

// SetFilterID sets the "filter_id" field.
func (_u *ChildFilterUpdateOne) SetFilterID(v int) *ChildFilterUpdateOne {
	_u.mutation.SetFilterID(v)
	return _u
}

// SetNillableFilterID sets the "filter_id" field if the given value is not nil.
func (_u *ChildFilterUpdateOne) SetNillableFilterID(v *int) *ChildFilterUpdateOne {
	if v != nil {
		_u.SetFilterID(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *ChildFilterUpdateOne) SetValue(v string) *ChildFilterUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *ChildFilterUpdateOne) SetNillableValue(v *string) *ChildFilterUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetChild sets the "child" edge to the Child entity.
func (_u *ChildFilterUpdateOne) SetChild(v *Child) *ChildFilterUpdateOne {
	return _u.SetChildID(v.ID)
}

// SetFilter sets the "filter" edge to the Filter entity.
func (_u *ChildFilterUpdateOne) SetFilter(v *Filter) *ChildFilterUpdateOne {
	return _u.SetFilterID(v.ID)
}

// Mutation returns the ChildFilterMutation object of the builder.
func (_u *ChildFilterUpdateOne) Mutation() *ChildFilterMutation {
	return _u.mutation
}

// ClearChild clears the "child" edge to the Child entity.
func (_u *ChildFilterUpdateOne) ClearChild() *ChildFilterUpdateOne {
	_u.mutation.ClearChild()
	return _u
}

// ClearFilter clears the "filter" edge to the Filter entity.
func (_u *ChildFilterUpdateOne) ClearFilter() *ChildFilterUpdateOne {
	_u.mutation.ClearFilter()
	return _u
}

// Where appends a list predicates to the ChildFilterUpdate builder.
func (_u *ChildFilterUpdateOne) Where(ps ...predicate.ChildFilter) *ChildFilterUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChildFilterUpdateOne) Select(field string, fields ...string) *ChildFilterUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ChildFilter entity.
func (_u *ChildFilterUpdateOne) Save(ctx context.Context) (*ChildFilter, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChildFilterUpdateOne) SaveX(ctx context.Context) *ChildFilter {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChildFilterUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChildFilterUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChildFilterUpdateOne) check() error {
	if _u.mutation.ChildCleared() && len(_u.mutation.ChildIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChildFilter.child"`)
	}
	if _u.mutation.FilterCleared() && len(_u.mutation.FilterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ChildFilter.filter"`)
	}
	return nil
}

func (_u *ChildFilterUpdateOne) sqlSave(ctx context.Context) (_node *ChildFilter, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(childfilter.Table, childfilter.Columns, sqlgraph.NewFieldSpec(childfilter.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChildFilter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, childfilter.FieldID)
		for _, f := range fields {
			if !childfilter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != childfilter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(childfilter.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   childfilter.ChildTable,
			Columns: []string{childfilter.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   childfilter.ChildTable,
			Columns: []string{childfilter.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(child.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   childfilter.FilterTable,
			Columns: []string{childfilter.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   childfilter.FilterTable,
			Columns: []string{childfilter.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChildFilter{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{childfilter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
