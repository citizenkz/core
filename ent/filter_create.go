// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/citizenkz/core/ent/benefitfilter"
	"github.com/citizenkz/core/ent/childfilter"
	"github.com/citizenkz/core/ent/filter"
	"github.com/citizenkz/core/ent/userfilter"
)

// FilterCreate is the builder for creating a Filter entity.
type FilterCreate struct {
	config
	mutation *FilterMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *FilterCreate) SetName(v string) *FilterCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetHint sets the "hint" field.
func (_c *FilterCreate) SetHint(v string) *FilterCreate {
	_c.mutation.SetHint(v)
	return _c
}

// SetNillableHint sets the "hint" field if the given value is not nil.
func (_c *FilterCreate) SetNillableHint(v *string) *FilterCreate {
	if v != nil {
		_c.SetHint(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *FilterCreate) SetType(v filter.Type) *FilterCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetValues sets the "values" field.
func (_c *FilterCreate) SetValues(v []string) *FilterCreate {
	_c.mutation.SetValues(v)
	return _c
}

// AddUserFilterIDs adds the "user_filters" edge to the UserFilter entity by IDs.
func (_c *FilterCreate) AddUserFilterIDs(ids ...int) *FilterCreate {
	_c.mutation.AddUserFilterIDs(ids...)
	return _c
}

// AddUserFilters adds the "user_filters" edges to the UserFilter entity.
func (_c *FilterCreate) AddUserFilters(v ...*UserFilter) *FilterCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserFilterIDs(ids...)
}

// AddBenefitFilterIDs adds the "benefit_filters" edge to the BenefitFilter entity by IDs.
func (_c *FilterCreate) AddBenefitFilterIDs(ids ...int) *FilterCreate {
	_c.mutation.AddBenefitFilterIDs(ids...)
	return _c
}

// AddBenefitFilters adds the "benefit_filters" edges to the BenefitFilter entity.
func (_c *FilterCreate) AddBenefitFilters(v ...*BenefitFilter) *FilterCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBenefitFilterIDs(ids...)
}

// AddChildFilterIDs adds the "child_filters" edge to the ChildFilter entity by IDs.
func (_c *FilterCreate) AddChildFilterIDs(ids ...int) *FilterCreate {
	_c.mutation.AddChildFilterIDs(ids...)
	return _c
}

// AddChildFilters adds the "child_filters" edges to the ChildFilter entity.
func (_c *FilterCreate) AddChildFilters(v ...*ChildFilter) *FilterCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildFilterIDs(ids...)
}

// Mutation returns the FilterMutation object of the builder.
func (_c *FilterCreate) Mutation() *FilterMutation {
	return _c.mutation
}

// Save creates the Filter in the database.
func (_c *FilterCreate) Save(ctx context.Context) (*Filter, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FilterCreate) SaveX(ctx context.Context) *Filter {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FilterCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FilterCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *FilterCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Filter.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := filter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Filter.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Filter.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := filter.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Filter.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Values(); !ok {
		return &ValidationError{Name: "values", err: errors.New(`ent: missing required field "Filter.values"`)}
	}
	return nil
}

func (_c *FilterCreate) sqlSave(ctx context.Context) (*Filter, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FilterCreate) createSpec() (*Filter, *sqlgraph.CreateSpec) {
	var (
		_node = &Filter{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(filter.Table, sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(filter.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Hint(); ok {
		_spec.SetField(filter.FieldHint, field.TypeString, value)
		_node.Hint = &value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(filter.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Values(); ok {
		_spec.SetField(filter.FieldValues, field.TypeJSON, value)
		_node.Values = value
	}
	if nodes := _c.mutation.UserFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.UserFiltersTable,
			Columns: []string{filter.UserFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BenefitFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.BenefitFiltersTable,
			Columns: []string{filter.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.ChildFiltersTable,
			Columns: []string{filter.ChildFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FilterCreateBulk is the builder for creating many Filter entities in bulk.
type FilterCreateBulk struct {
	config
	err      error
	builders []*FilterCreate
}

// Save creates the Filter entities in the database.
func (_c *FilterCreateBulk) Save(ctx context.Context) ([]*Filter, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Filter, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FilterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FilterCreateBulk) SaveX(ctx context.Context) []*Filter {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FilterCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FilterCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
