// Code generated by ent, DO NOT EDIT.

package childfilter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the childfilter type in the database.
	Label = "child_filter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChildID holds the string denoting the child_id field in the database.
	FieldChildID = "child_id"
	// FieldFilterID holds the string denoting the filter_id field in the database.
	FieldFilterID = "filter_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeChild holds the string denoting the child edge name in mutations.
	EdgeChild = "child"
	// EdgeFilter holds the string denoting the filter edge name in mutations.
	EdgeFilter = "filter"
	// Table holds the table name of the childfilter in the database.
	Table = "child_filters"
	// ChildTable is the table that holds the child relation/edge.
	ChildTable = "child_filters"
	// ChildInverseTable is the table name for the Child entity.
	// It exists in this package in order to avoid circular dependency with the "child" package.
	ChildInverseTable = "childs"
	// ChildColumn is the table column denoting the child relation/edge.
	ChildColumn = "child_id"
	// FilterTable is the table that holds the filter relation/edge.
	FilterTable = "child_filters"
	// FilterInverseTable is the table name for the Filter entity.
	// It exists in this package in order to avoid circular dependency with the "filter" package.
	FilterInverseTable = "filters"
	// FilterColumn is the table column denoting the filter relation/edge.
	FilterColumn = "filter_id"
)

// Columns holds all SQL columns for childfilter fields.
var Columns = []string{
	FieldID,
	FieldChildID,
	FieldFilterID,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ChildFilter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChildID orders the results by the child_id field.
func ByChildID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChildID, opts...).ToFunc()
}

// ByFilterID orders the results by the filter_id field.
func ByFilterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilterID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByChildField orders the results by child field.
func ByChildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildStep(), sql.OrderByField(field, opts...))
	}
}

// ByFilterField orders the results by filter field.
func ByFilterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilterStep(), sql.OrderByField(field, opts...))
	}
}
func newChildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ChildTable, ChildColumn),
	)
}
func newFilterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FilterTable, FilterColumn),
	)
}
