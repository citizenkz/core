// Code generated by ent, DO NOT EDIT.

package childfilter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/citizenkz/core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldLTE(FieldID, id))
}

// ChildID applies equality check predicate on the "child_id" field. It's identical to ChildIDEQ.
func ChildID(v int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldEQ(FieldChildID, v))
}

// FilterID applies equality check predicate on the "filter_id" field. It's identical to FilterIDEQ.
func FilterID(v int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldEQ(FieldFilterID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldEQ(FieldValue, v))
}

// ChildIDEQ applies the EQ predicate on the "child_id" field.
func ChildIDEQ(v int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldEQ(FieldChildID, v))
}

// ChildIDNEQ applies the NEQ predicate on the "child_id" field.
func ChildIDNEQ(v int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldNEQ(FieldChildID, v))
}

// ChildIDIn applies the In predicate on the "child_id" field.
func ChildIDIn(vs ...int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldIn(FieldChildID, vs...))
}

// ChildIDNotIn applies the NotIn predicate on the "child_id" field.
func ChildIDNotIn(vs ...int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldNotIn(FieldChildID, vs...))
}

// FilterIDEQ applies the EQ predicate on the "filter_id" field.
func FilterIDEQ(v int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldEQ(FieldFilterID, v))
}

// FilterIDNEQ applies the NEQ predicate on the "filter_id" field.
func FilterIDNEQ(v int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldNEQ(FieldFilterID, v))
}

// FilterIDIn applies the In predicate on the "filter_id" field.
func FilterIDIn(vs ...int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldIn(FieldFilterID, vs...))
}

// FilterIDNotIn applies the NotIn predicate on the "filter_id" field.
func FilterIDNotIn(vs ...int) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldNotIn(FieldFilterID, vs...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.ChildFilter {
	return predicate.ChildFilter(sql.FieldContainsFold(FieldValue, v))
}

// HasChild applies the HasEdge predicate on the "child" edge.
func HasChild() predicate.ChildFilter {
	return predicate.ChildFilter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChildTable, ChildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildWith applies the HasEdge predicate on the "child" edge with a given conditions (other predicates).
func HasChildWith(preds ...predicate.Child) predicate.ChildFilter {
	return predicate.ChildFilter(func(s *sql.Selector) {
		step := newChildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFilter applies the HasEdge predicate on the "filter" edge.
func HasFilter() predicate.ChildFilter {
	return predicate.ChildFilter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FilterTable, FilterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilterWith applies the HasEdge predicate on the "filter" edge with a given conditions (other predicates).
func HasFilterWith(preds ...predicate.Filter) predicate.ChildFilter {
	return predicate.ChildFilter(func(s *sql.Selector) {
		step := newFilterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChildFilter) predicate.ChildFilter {
	return predicate.ChildFilter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChildFilter) predicate.ChildFilter {
	return predicate.ChildFilter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChildFilter) predicate.ChildFilter {
	return predicate.ChildFilter(sql.NotPredicates(p))
}
