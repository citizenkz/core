// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/citizenkz/core/ent/filter"
	"github.com/citizenkz/core/ent/user"
	"github.com/citizenkz/core/ent/userfilter"
)

// UserFilter is the model entity for the UserFilter schema.
type UserFilter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// FilterID holds the value of the "filter_id" field.
	FilterID int `json:"filter_id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserFilterQuery when eager-loading is set.
	Edges        UserFilterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserFilterEdges holds the relations/edges for other nodes in the graph.
type UserFilterEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Filter holds the value of the filter edge.
	Filter *Filter `json:"filter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserFilterEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// FilterOrErr returns the Filter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserFilterEdges) FilterOrErr() (*Filter, error) {
	if e.Filter != nil {
		return e.Filter, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: filter.Label}
	}
	return nil, &NotLoadedError{edge: "filter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserFilter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userfilter.FieldID, userfilter.FieldUserID, userfilter.FieldFilterID:
			values[i] = new(sql.NullInt64)
		case userfilter.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserFilter fields.
func (_m *UserFilter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userfilter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case userfilter.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = int(value.Int64)
			}
		case userfilter.FieldFilterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field filter_id", values[i])
			} else if value.Valid {
				_m.FilterID = int(value.Int64)
			}
		case userfilter.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the UserFilter.
// This includes values selected through modifiers, order, etc.
func (_m *UserFilter) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserFilter entity.
func (_m *UserFilter) QueryUser() *UserQuery {
	return NewUserFilterClient(_m.config).QueryUser(_m)
}

// QueryFilter queries the "filter" edge of the UserFilter entity.
func (_m *UserFilter) QueryFilter() *FilterQuery {
	return NewUserFilterClient(_m.config).QueryFilter(_m)
}

// Update returns a builder for updating this UserFilter.
// Note that you need to call UserFilter.Unwrap() before calling this method if this UserFilter
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserFilter) Update() *UserFilterUpdateOne {
	return NewUserFilterClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserFilter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserFilter) Unwrap() *UserFilter {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserFilter is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserFilter) String() string {
	var builder strings.Builder
	builder.WriteString("UserFilter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("filter_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.FilterID))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(_m.Value)
	builder.WriteByte(')')
	return builder.String()
}

// UserFilters is a parsable slice of UserFilter.
type UserFilters []*UserFilter
