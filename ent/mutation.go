// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/citizenkz/core/ent/attempt"
	"github.com/citizenkz/core/ent/benefit"
	"github.com/citizenkz/core/ent/benefitfilter"
	"github.com/citizenkz/core/ent/filter"
	"github.com/citizenkz/core/ent/predicate"
	"github.com/citizenkz/core/ent/user"
	"github.com/citizenkz/core/ent/userfilter"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttempt       = "Attempt"
	TypeBenefit       = "Benefit"
	TypeBenefitFilter = "BenefitFilter"
	TypeFilter        = "Filter"
	TypeUser          = "User"
	TypeUserFilter    = "UserFilter"
)

// AttemptMutation represents an operation that mutates the Attempt nodes in the graph.
type AttemptMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	otp           *string
	email         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Attempt, error)
	predicates    []predicate.Attempt
}

var _ ent.Mutation = (*AttemptMutation)(nil)

// attemptOption allows management of the mutation configuration using functional options.
type attemptOption func(*AttemptMutation)

// newAttemptMutation creates new mutation for the Attempt entity.
func newAttemptMutation(c config, op Op, opts ...attemptOption) *AttemptMutation {
	m := &AttemptMutation{
		config:        c,
		op:            op,
		typ:           TypeAttempt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttemptID sets the ID field of the mutation.
func withAttemptID(id uuid.UUID) attemptOption {
	return func(m *AttemptMutation) {
		var (
			err   error
			once  sync.Once
			value *Attempt
		)
		m.oldValue = func(ctx context.Context) (*Attempt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attempt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttempt sets the old Attempt of the mutation.
func withAttempt(node *Attempt) attemptOption {
	return func(m *AttemptMutation) {
		m.oldValue = func(context.Context) (*Attempt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttemptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttemptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Attempt entities.
func (m *AttemptMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttemptMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttemptMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attempt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOtp sets the "otp" field.
func (m *AttemptMutation) SetOtp(s string) {
	m.otp = &s
}

// Otp returns the value of the "otp" field in the mutation.
func (m *AttemptMutation) Otp() (r string, exists bool) {
	v := m.otp
	if v == nil {
		return
	}
	return *v, true
}

// OldOtp returns the old "otp" field's value of the Attempt entity.
// If the Attempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttemptMutation) OldOtp(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtp: %w", err)
	}
	return oldValue.Otp, nil
}

// ResetOtp resets all changes to the "otp" field.
func (m *AttemptMutation) ResetOtp() {
	m.otp = nil
}

// SetEmail sets the "email" field.
func (m *AttemptMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *AttemptMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Attempt entity.
// If the Attempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttemptMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *AttemptMutation) ResetEmail() {
	m.email = nil
}

// Where appends a list predicates to the AttemptMutation builder.
func (m *AttemptMutation) Where(ps ...predicate.Attempt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttemptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttemptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Attempt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttemptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttemptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Attempt).
func (m *AttemptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttemptMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.otp != nil {
		fields = append(fields, attempt.FieldOtp)
	}
	if m.email != nil {
		fields = append(fields, attempt.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttemptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attempt.FieldOtp:
		return m.Otp()
	case attempt.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttemptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attempt.FieldOtp:
		return m.OldOtp(ctx)
	case attempt.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown Attempt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttemptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attempt.FieldOtp:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtp(v)
		return nil
	case attempt.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown Attempt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttemptMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttemptMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttemptMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Attempt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttemptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttemptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttemptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Attempt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttemptMutation) ResetField(name string) error {
	switch name {
	case attempt.FieldOtp:
		m.ResetOtp()
		return nil
	case attempt.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown Attempt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttemptMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttemptMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttemptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttemptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttemptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttemptMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttemptMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Attempt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttemptMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Attempt edge %s", name)
}

// BenefitMutation represents an operation that mutates the Benefit nodes in the graph.
type BenefitMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	title                  *string
	content                *string
	bonus                  *string
	video_url              *string
	source_url             *string
	clearedFields          map[string]struct{}
	benefit_filters        map[int]struct{}
	removedbenefit_filters map[int]struct{}
	clearedbenefit_filters bool
	done                   bool
	oldValue               func(context.Context) (*Benefit, error)
	predicates             []predicate.Benefit
}

var _ ent.Mutation = (*BenefitMutation)(nil)

// benefitOption allows management of the mutation configuration using functional options.
type benefitOption func(*BenefitMutation)

// newBenefitMutation creates new mutation for the Benefit entity.
func newBenefitMutation(c config, op Op, opts ...benefitOption) *BenefitMutation {
	m := &BenefitMutation{
		config:        c,
		op:            op,
		typ:           TypeBenefit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBenefitID sets the ID field of the mutation.
func withBenefitID(id int) benefitOption {
	return func(m *BenefitMutation) {
		var (
			err   error
			once  sync.Once
			value *Benefit
		)
		m.oldValue = func(ctx context.Context) (*Benefit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Benefit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBenefit sets the old Benefit of the mutation.
func withBenefit(node *Benefit) benefitOption {
	return func(m *BenefitMutation) {
		m.oldValue = func(context.Context) (*Benefit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BenefitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BenefitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BenefitMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BenefitMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Benefit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *BenefitMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *BenefitMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Benefit entity.
// If the Benefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BenefitMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *BenefitMutation) ResetTitle() {
	m.title = nil
}

// SetContent sets the "content" field.
func (m *BenefitMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *BenefitMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Benefit entity.
// If the Benefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BenefitMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *BenefitMutation) ResetContent() {
	m.content = nil
}

// SetBonus sets the "bonus" field.
func (m *BenefitMutation) SetBonus(s string) {
	m.bonus = &s
}

// Bonus returns the value of the "bonus" field in the mutation.
func (m *BenefitMutation) Bonus() (r string, exists bool) {
	v := m.bonus
	if v == nil {
		return
	}
	return *v, true
}

// OldBonus returns the old "bonus" field's value of the Benefit entity.
// If the Benefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BenefitMutation) OldBonus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBonus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBonus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBonus: %w", err)
	}
	return oldValue.Bonus, nil
}

// ResetBonus resets all changes to the "bonus" field.
func (m *BenefitMutation) ResetBonus() {
	m.bonus = nil
}

// SetVideoURL sets the "video_url" field.
func (m *BenefitMutation) SetVideoURL(s string) {
	m.video_url = &s
}

// VideoURL returns the value of the "video_url" field in the mutation.
func (m *BenefitMutation) VideoURL() (r string, exists bool) {
	v := m.video_url
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoURL returns the old "video_url" field's value of the Benefit entity.
// If the Benefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BenefitMutation) OldVideoURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoURL: %w", err)
	}
	return oldValue.VideoURL, nil
}

// ClearVideoURL clears the value of the "video_url" field.
func (m *BenefitMutation) ClearVideoURL() {
	m.video_url = nil
	m.clearedFields[benefit.FieldVideoURL] = struct{}{}
}

// VideoURLCleared returns if the "video_url" field was cleared in this mutation.
func (m *BenefitMutation) VideoURLCleared() bool {
	_, ok := m.clearedFields[benefit.FieldVideoURL]
	return ok
}

// ResetVideoURL resets all changes to the "video_url" field.
func (m *BenefitMutation) ResetVideoURL() {
	m.video_url = nil
	delete(m.clearedFields, benefit.FieldVideoURL)
}

// SetSourceURL sets the "source_url" field.
func (m *BenefitMutation) SetSourceURL(s string) {
	m.source_url = &s
}

// SourceURL returns the value of the "source_url" field in the mutation.
func (m *BenefitMutation) SourceURL() (r string, exists bool) {
	v := m.source_url
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceURL returns the old "source_url" field's value of the Benefit entity.
// If the Benefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BenefitMutation) OldSourceURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceURL: %w", err)
	}
	return oldValue.SourceURL, nil
}

// ClearSourceURL clears the value of the "source_url" field.
func (m *BenefitMutation) ClearSourceURL() {
	m.source_url = nil
	m.clearedFields[benefit.FieldSourceURL] = struct{}{}
}

// SourceURLCleared returns if the "source_url" field was cleared in this mutation.
func (m *BenefitMutation) SourceURLCleared() bool {
	_, ok := m.clearedFields[benefit.FieldSourceURL]
	return ok
}

// ResetSourceURL resets all changes to the "source_url" field.
func (m *BenefitMutation) ResetSourceURL() {
	m.source_url = nil
	delete(m.clearedFields, benefit.FieldSourceURL)
}

// AddBenefitFilterIDs adds the "benefit_filters" edge to the BenefitFilter entity by ids.
func (m *BenefitMutation) AddBenefitFilterIDs(ids ...int) {
	if m.benefit_filters == nil {
		m.benefit_filters = make(map[int]struct{})
	}
	for i := range ids {
		m.benefit_filters[ids[i]] = struct{}{}
	}
}

// ClearBenefitFilters clears the "benefit_filters" edge to the BenefitFilter entity.
func (m *BenefitMutation) ClearBenefitFilters() {
	m.clearedbenefit_filters = true
}

// BenefitFiltersCleared reports if the "benefit_filters" edge to the BenefitFilter entity was cleared.
func (m *BenefitMutation) BenefitFiltersCleared() bool {
	return m.clearedbenefit_filters
}

// RemoveBenefitFilterIDs removes the "benefit_filters" edge to the BenefitFilter entity by IDs.
func (m *BenefitMutation) RemoveBenefitFilterIDs(ids ...int) {
	if m.removedbenefit_filters == nil {
		m.removedbenefit_filters = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.benefit_filters, ids[i])
		m.removedbenefit_filters[ids[i]] = struct{}{}
	}
}

// RemovedBenefitFilters returns the removed IDs of the "benefit_filters" edge to the BenefitFilter entity.
func (m *BenefitMutation) RemovedBenefitFiltersIDs() (ids []int) {
	for id := range m.removedbenefit_filters {
		ids = append(ids, id)
	}
	return
}

// BenefitFiltersIDs returns the "benefit_filters" edge IDs in the mutation.
func (m *BenefitMutation) BenefitFiltersIDs() (ids []int) {
	for id := range m.benefit_filters {
		ids = append(ids, id)
	}
	return
}

// ResetBenefitFilters resets all changes to the "benefit_filters" edge.
func (m *BenefitMutation) ResetBenefitFilters() {
	m.benefit_filters = nil
	m.clearedbenefit_filters = false
	m.removedbenefit_filters = nil
}

// Where appends a list predicates to the BenefitMutation builder.
func (m *BenefitMutation) Where(ps ...predicate.Benefit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BenefitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BenefitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Benefit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BenefitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BenefitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Benefit).
func (m *BenefitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BenefitMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.title != nil {
		fields = append(fields, benefit.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, benefit.FieldContent)
	}
	if m.bonus != nil {
		fields = append(fields, benefit.FieldBonus)
	}
	if m.video_url != nil {
		fields = append(fields, benefit.FieldVideoURL)
	}
	if m.source_url != nil {
		fields = append(fields, benefit.FieldSourceURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BenefitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case benefit.FieldTitle:
		return m.Title()
	case benefit.FieldContent:
		return m.Content()
	case benefit.FieldBonus:
		return m.Bonus()
	case benefit.FieldVideoURL:
		return m.VideoURL()
	case benefit.FieldSourceURL:
		return m.SourceURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BenefitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case benefit.FieldTitle:
		return m.OldTitle(ctx)
	case benefit.FieldContent:
		return m.OldContent(ctx)
	case benefit.FieldBonus:
		return m.OldBonus(ctx)
	case benefit.FieldVideoURL:
		return m.OldVideoURL(ctx)
	case benefit.FieldSourceURL:
		return m.OldSourceURL(ctx)
	}
	return nil, fmt.Errorf("unknown Benefit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BenefitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case benefit.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case benefit.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case benefit.FieldBonus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBonus(v)
		return nil
	case benefit.FieldVideoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoURL(v)
		return nil
	case benefit.FieldSourceURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceURL(v)
		return nil
	}
	return fmt.Errorf("unknown Benefit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BenefitMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BenefitMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BenefitMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Benefit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BenefitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(benefit.FieldVideoURL) {
		fields = append(fields, benefit.FieldVideoURL)
	}
	if m.FieldCleared(benefit.FieldSourceURL) {
		fields = append(fields, benefit.FieldSourceURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BenefitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BenefitMutation) ClearField(name string) error {
	switch name {
	case benefit.FieldVideoURL:
		m.ClearVideoURL()
		return nil
	case benefit.FieldSourceURL:
		m.ClearSourceURL()
		return nil
	}
	return fmt.Errorf("unknown Benefit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BenefitMutation) ResetField(name string) error {
	switch name {
	case benefit.FieldTitle:
		m.ResetTitle()
		return nil
	case benefit.FieldContent:
		m.ResetContent()
		return nil
	case benefit.FieldBonus:
		m.ResetBonus()
		return nil
	case benefit.FieldVideoURL:
		m.ResetVideoURL()
		return nil
	case benefit.FieldSourceURL:
		m.ResetSourceURL()
		return nil
	}
	return fmt.Errorf("unknown Benefit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BenefitMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.benefit_filters != nil {
		edges = append(edges, benefit.EdgeBenefitFilters)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BenefitMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case benefit.EdgeBenefitFilters:
		ids := make([]ent.Value, 0, len(m.benefit_filters))
		for id := range m.benefit_filters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BenefitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedbenefit_filters != nil {
		edges = append(edges, benefit.EdgeBenefitFilters)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BenefitMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case benefit.EdgeBenefitFilters:
		ids := make([]ent.Value, 0, len(m.removedbenefit_filters))
		for id := range m.removedbenefit_filters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BenefitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbenefit_filters {
		edges = append(edges, benefit.EdgeBenefitFilters)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BenefitMutation) EdgeCleared(name string) bool {
	switch name {
	case benefit.EdgeBenefitFilters:
		return m.clearedbenefit_filters
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BenefitMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Benefit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BenefitMutation) ResetEdge(name string) error {
	switch name {
	case benefit.EdgeBenefitFilters:
		m.ResetBenefitFilters()
		return nil
	}
	return fmt.Errorf("unknown Benefit edge %s", name)
}

// BenefitFilterMutation represents an operation that mutates the BenefitFilter nodes in the graph.
type BenefitFilterMutation struct {
	config
	op             Op
	typ            string
	id             *int
	value          *string
	from           *string
	to             *string
	clearedFields  map[string]struct{}
	benefit        *int
	clearedbenefit bool
	filter         *int
	clearedfilter  bool
	done           bool
	oldValue       func(context.Context) (*BenefitFilter, error)
	predicates     []predicate.BenefitFilter
}

var _ ent.Mutation = (*BenefitFilterMutation)(nil)

// benefitfilterOption allows management of the mutation configuration using functional options.
type benefitfilterOption func(*BenefitFilterMutation)

// newBenefitFilterMutation creates new mutation for the BenefitFilter entity.
func newBenefitFilterMutation(c config, op Op, opts ...benefitfilterOption) *BenefitFilterMutation {
	m := &BenefitFilterMutation{
		config:        c,
		op:            op,
		typ:           TypeBenefitFilter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBenefitFilterID sets the ID field of the mutation.
func withBenefitFilterID(id int) benefitfilterOption {
	return func(m *BenefitFilterMutation) {
		var (
			err   error
			once  sync.Once
			value *BenefitFilter
		)
		m.oldValue = func(ctx context.Context) (*BenefitFilter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BenefitFilter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBenefitFilter sets the old BenefitFilter of the mutation.
func withBenefitFilter(node *BenefitFilter) benefitfilterOption {
	return func(m *BenefitFilterMutation) {
		m.oldValue = func(context.Context) (*BenefitFilter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BenefitFilterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BenefitFilterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BenefitFilterMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BenefitFilterMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BenefitFilter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBenefitID sets the "benefit_id" field.
func (m *BenefitFilterMutation) SetBenefitID(i int) {
	m.benefit = &i
}

// BenefitID returns the value of the "benefit_id" field in the mutation.
func (m *BenefitFilterMutation) BenefitID() (r int, exists bool) {
	v := m.benefit
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitID returns the old "benefit_id" field's value of the BenefitFilter entity.
// If the BenefitFilter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BenefitFilterMutation) OldBenefitID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitID: %w", err)
	}
	return oldValue.BenefitID, nil
}

// ResetBenefitID resets all changes to the "benefit_id" field.
func (m *BenefitFilterMutation) ResetBenefitID() {
	m.benefit = nil
}

// SetFilterID sets the "filter_id" field.
func (m *BenefitFilterMutation) SetFilterID(i int) {
	m.filter = &i
}

// FilterID returns the value of the "filter_id" field in the mutation.
func (m *BenefitFilterMutation) FilterID() (r int, exists bool) {
	v := m.filter
	if v == nil {
		return
	}
	return *v, true
}

// OldFilterID returns the old "filter_id" field's value of the BenefitFilter entity.
// If the BenefitFilter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BenefitFilterMutation) OldFilterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilterID: %w", err)
	}
	return oldValue.FilterID, nil
}

// ResetFilterID resets all changes to the "filter_id" field.
func (m *BenefitFilterMutation) ResetFilterID() {
	m.filter = nil
}

// SetValue sets the "value" field.
func (m *BenefitFilterMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *BenefitFilterMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the BenefitFilter entity.
// If the BenefitFilter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BenefitFilterMutation) OldValue(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ClearValue clears the value of the "value" field.
func (m *BenefitFilterMutation) ClearValue() {
	m.value = nil
	m.clearedFields[benefitfilter.FieldValue] = struct{}{}
}

// ValueCleared returns if the "value" field was cleared in this mutation.
func (m *BenefitFilterMutation) ValueCleared() bool {
	_, ok := m.clearedFields[benefitfilter.FieldValue]
	return ok
}

// ResetValue resets all changes to the "value" field.
func (m *BenefitFilterMutation) ResetValue() {
	m.value = nil
	delete(m.clearedFields, benefitfilter.FieldValue)
}

// SetFrom sets the "from" field.
func (m *BenefitFilterMutation) SetFrom(s string) {
	m.from = &s
}

// From returns the value of the "from" field in the mutation.
func (m *BenefitFilterMutation) From() (r string, exists bool) {
	v := m.from
	if v == nil {
		return
	}
	return *v, true
}

// OldFrom returns the old "from" field's value of the BenefitFilter entity.
// If the BenefitFilter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BenefitFilterMutation) OldFrom(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrom: %w", err)
	}
	return oldValue.From, nil
}

// ClearFrom clears the value of the "from" field.
func (m *BenefitFilterMutation) ClearFrom() {
	m.from = nil
	m.clearedFields[benefitfilter.FieldFrom] = struct{}{}
}

// FromCleared returns if the "from" field was cleared in this mutation.
func (m *BenefitFilterMutation) FromCleared() bool {
	_, ok := m.clearedFields[benefitfilter.FieldFrom]
	return ok
}

// ResetFrom resets all changes to the "from" field.
func (m *BenefitFilterMutation) ResetFrom() {
	m.from = nil
	delete(m.clearedFields, benefitfilter.FieldFrom)
}

// SetTo sets the "to" field.
func (m *BenefitFilterMutation) SetTo(s string) {
	m.to = &s
}

// To returns the value of the "to" field in the mutation.
func (m *BenefitFilterMutation) To() (r string, exists bool) {
	v := m.to
	if v == nil {
		return
	}
	return *v, true
}

// OldTo returns the old "to" field's value of the BenefitFilter entity.
// If the BenefitFilter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BenefitFilterMutation) OldTo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTo: %w", err)
	}
	return oldValue.To, nil
}

// ClearTo clears the value of the "to" field.
func (m *BenefitFilterMutation) ClearTo() {
	m.to = nil
	m.clearedFields[benefitfilter.FieldTo] = struct{}{}
}

// ToCleared returns if the "to" field was cleared in this mutation.
func (m *BenefitFilterMutation) ToCleared() bool {
	_, ok := m.clearedFields[benefitfilter.FieldTo]
	return ok
}

// ResetTo resets all changes to the "to" field.
func (m *BenefitFilterMutation) ResetTo() {
	m.to = nil
	delete(m.clearedFields, benefitfilter.FieldTo)
}

// ClearBenefit clears the "benefit" edge to the Benefit entity.
func (m *BenefitFilterMutation) ClearBenefit() {
	m.clearedbenefit = true
	m.clearedFields[benefitfilter.FieldBenefitID] = struct{}{}
}

// BenefitCleared reports if the "benefit" edge to the Benefit entity was cleared.
func (m *BenefitFilterMutation) BenefitCleared() bool {
	return m.clearedbenefit
}

// BenefitIDs returns the "benefit" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BenefitID instead. It exists only for internal usage by the builders.
func (m *BenefitFilterMutation) BenefitIDs() (ids []int) {
	if id := m.benefit; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBenefit resets all changes to the "benefit" edge.
func (m *BenefitFilterMutation) ResetBenefit() {
	m.benefit = nil
	m.clearedbenefit = false
}

// ClearFilter clears the "filter" edge to the Filter entity.
func (m *BenefitFilterMutation) ClearFilter() {
	m.clearedfilter = true
	m.clearedFields[benefitfilter.FieldFilterID] = struct{}{}
}

// FilterCleared reports if the "filter" edge to the Filter entity was cleared.
func (m *BenefitFilterMutation) FilterCleared() bool {
	return m.clearedfilter
}

// FilterIDs returns the "filter" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FilterID instead. It exists only for internal usage by the builders.
func (m *BenefitFilterMutation) FilterIDs() (ids []int) {
	if id := m.filter; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFilter resets all changes to the "filter" edge.
func (m *BenefitFilterMutation) ResetFilter() {
	m.filter = nil
	m.clearedfilter = false
}

// Where appends a list predicates to the BenefitFilterMutation builder.
func (m *BenefitFilterMutation) Where(ps ...predicate.BenefitFilter) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BenefitFilterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BenefitFilterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BenefitFilter, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BenefitFilterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BenefitFilterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BenefitFilter).
func (m *BenefitFilterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BenefitFilterMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.benefit != nil {
		fields = append(fields, benefitfilter.FieldBenefitID)
	}
	if m.filter != nil {
		fields = append(fields, benefitfilter.FieldFilterID)
	}
	if m.value != nil {
		fields = append(fields, benefitfilter.FieldValue)
	}
	if m.from != nil {
		fields = append(fields, benefitfilter.FieldFrom)
	}
	if m.to != nil {
		fields = append(fields, benefitfilter.FieldTo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BenefitFilterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case benefitfilter.FieldBenefitID:
		return m.BenefitID()
	case benefitfilter.FieldFilterID:
		return m.FilterID()
	case benefitfilter.FieldValue:
		return m.Value()
	case benefitfilter.FieldFrom:
		return m.From()
	case benefitfilter.FieldTo:
		return m.To()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BenefitFilterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case benefitfilter.FieldBenefitID:
		return m.OldBenefitID(ctx)
	case benefitfilter.FieldFilterID:
		return m.OldFilterID(ctx)
	case benefitfilter.FieldValue:
		return m.OldValue(ctx)
	case benefitfilter.FieldFrom:
		return m.OldFrom(ctx)
	case benefitfilter.FieldTo:
		return m.OldTo(ctx)
	}
	return nil, fmt.Errorf("unknown BenefitFilter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BenefitFilterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case benefitfilter.FieldBenefitID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitID(v)
		return nil
	case benefitfilter.FieldFilterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilterID(v)
		return nil
	case benefitfilter.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case benefitfilter.FieldFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrom(v)
		return nil
	case benefitfilter.FieldTo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTo(v)
		return nil
	}
	return fmt.Errorf("unknown BenefitFilter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BenefitFilterMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BenefitFilterMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BenefitFilterMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BenefitFilter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BenefitFilterMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(benefitfilter.FieldValue) {
		fields = append(fields, benefitfilter.FieldValue)
	}
	if m.FieldCleared(benefitfilter.FieldFrom) {
		fields = append(fields, benefitfilter.FieldFrom)
	}
	if m.FieldCleared(benefitfilter.FieldTo) {
		fields = append(fields, benefitfilter.FieldTo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BenefitFilterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BenefitFilterMutation) ClearField(name string) error {
	switch name {
	case benefitfilter.FieldValue:
		m.ClearValue()
		return nil
	case benefitfilter.FieldFrom:
		m.ClearFrom()
		return nil
	case benefitfilter.FieldTo:
		m.ClearTo()
		return nil
	}
	return fmt.Errorf("unknown BenefitFilter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BenefitFilterMutation) ResetField(name string) error {
	switch name {
	case benefitfilter.FieldBenefitID:
		m.ResetBenefitID()
		return nil
	case benefitfilter.FieldFilterID:
		m.ResetFilterID()
		return nil
	case benefitfilter.FieldValue:
		m.ResetValue()
		return nil
	case benefitfilter.FieldFrom:
		m.ResetFrom()
		return nil
	case benefitfilter.FieldTo:
		m.ResetTo()
		return nil
	}
	return fmt.Errorf("unknown BenefitFilter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BenefitFilterMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.benefit != nil {
		edges = append(edges, benefitfilter.EdgeBenefit)
	}
	if m.filter != nil {
		edges = append(edges, benefitfilter.EdgeFilter)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BenefitFilterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case benefitfilter.EdgeBenefit:
		if id := m.benefit; id != nil {
			return []ent.Value{*id}
		}
	case benefitfilter.EdgeFilter:
		if id := m.filter; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BenefitFilterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BenefitFilterMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BenefitFilterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedbenefit {
		edges = append(edges, benefitfilter.EdgeBenefit)
	}
	if m.clearedfilter {
		edges = append(edges, benefitfilter.EdgeFilter)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BenefitFilterMutation) EdgeCleared(name string) bool {
	switch name {
	case benefitfilter.EdgeBenefit:
		return m.clearedbenefit
	case benefitfilter.EdgeFilter:
		return m.clearedfilter
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BenefitFilterMutation) ClearEdge(name string) error {
	switch name {
	case benefitfilter.EdgeBenefit:
		m.ClearBenefit()
		return nil
	case benefitfilter.EdgeFilter:
		m.ClearFilter()
		return nil
	}
	return fmt.Errorf("unknown BenefitFilter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BenefitFilterMutation) ResetEdge(name string) error {
	switch name {
	case benefitfilter.EdgeBenefit:
		m.ResetBenefit()
		return nil
	case benefitfilter.EdgeFilter:
		m.ResetFilter()
		return nil
	}
	return fmt.Errorf("unknown BenefitFilter edge %s", name)
}

// FilterMutation represents an operation that mutates the Filter nodes in the graph.
type FilterMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	hint                   *string
	_type                  *filter.Type
	values                 *[]string
	appendvalues           []string
	clearedFields          map[string]struct{}
	user_filters           map[int]struct{}
	removeduser_filters    map[int]struct{}
	cleareduser_filters    bool
	benefit_filters        map[int]struct{}
	removedbenefit_filters map[int]struct{}
	clearedbenefit_filters bool
	done                   bool
	oldValue               func(context.Context) (*Filter, error)
	predicates             []predicate.Filter
}

var _ ent.Mutation = (*FilterMutation)(nil)

// filterOption allows management of the mutation configuration using functional options.
type filterOption func(*FilterMutation)

// newFilterMutation creates new mutation for the Filter entity.
func newFilterMutation(c config, op Op, opts ...filterOption) *FilterMutation {
	m := &FilterMutation{
		config:        c,
		op:            op,
		typ:           TypeFilter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFilterID sets the ID field of the mutation.
func withFilterID(id int) filterOption {
	return func(m *FilterMutation) {
		var (
			err   error
			once  sync.Once
			value *Filter
		)
		m.oldValue = func(ctx context.Context) (*Filter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Filter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFilter sets the old Filter of the mutation.
func withFilter(node *Filter) filterOption {
	return func(m *FilterMutation) {
		m.oldValue = func(context.Context) (*Filter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FilterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FilterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FilterMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FilterMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Filter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FilterMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FilterMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Filter entity.
// If the Filter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilterMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FilterMutation) ResetName() {
	m.name = nil
}

// SetHint sets the "hint" field.
func (m *FilterMutation) SetHint(s string) {
	m.hint = &s
}

// Hint returns the value of the "hint" field in the mutation.
func (m *FilterMutation) Hint() (r string, exists bool) {
	v := m.hint
	if v == nil {
		return
	}
	return *v, true
}

// OldHint returns the old "hint" field's value of the Filter entity.
// If the Filter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilterMutation) OldHint(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHint: %w", err)
	}
	return oldValue.Hint, nil
}

// ClearHint clears the value of the "hint" field.
func (m *FilterMutation) ClearHint() {
	m.hint = nil
	m.clearedFields[filter.FieldHint] = struct{}{}
}

// HintCleared returns if the "hint" field was cleared in this mutation.
func (m *FilterMutation) HintCleared() bool {
	_, ok := m.clearedFields[filter.FieldHint]
	return ok
}

// ResetHint resets all changes to the "hint" field.
func (m *FilterMutation) ResetHint() {
	m.hint = nil
	delete(m.clearedFields, filter.FieldHint)
}

// SetType sets the "type" field.
func (m *FilterMutation) SetType(f filter.Type) {
	m._type = &f
}

// GetType returns the value of the "type" field in the mutation.
func (m *FilterMutation) GetType() (r filter.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Filter entity.
// If the Filter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilterMutation) OldType(ctx context.Context) (v filter.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *FilterMutation) ResetType() {
	m._type = nil
}

// SetValues sets the "values" field.
func (m *FilterMutation) SetValues(s []string) {
	m.values = &s
	m.appendvalues = nil
}

// Values returns the value of the "values" field in the mutation.
func (m *FilterMutation) Values() (r []string, exists bool) {
	v := m.values
	if v == nil {
		return
	}
	return *v, true
}

// OldValues returns the old "values" field's value of the Filter entity.
// If the Filter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FilterMutation) OldValues(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValues is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValues requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValues: %w", err)
	}
	return oldValue.Values, nil
}

// AppendValues adds s to the "values" field.
func (m *FilterMutation) AppendValues(s []string) {
	m.appendvalues = append(m.appendvalues, s...)
}

// AppendedValues returns the list of values that were appended to the "values" field in this mutation.
func (m *FilterMutation) AppendedValues() ([]string, bool) {
	if len(m.appendvalues) == 0 {
		return nil, false
	}
	return m.appendvalues, true
}

// ResetValues resets all changes to the "values" field.
func (m *FilterMutation) ResetValues() {
	m.values = nil
	m.appendvalues = nil
}

// AddUserFilterIDs adds the "user_filters" edge to the UserFilter entity by ids.
func (m *FilterMutation) AddUserFilterIDs(ids ...int) {
	if m.user_filters == nil {
		m.user_filters = make(map[int]struct{})
	}
	for i := range ids {
		m.user_filters[ids[i]] = struct{}{}
	}
}

// ClearUserFilters clears the "user_filters" edge to the UserFilter entity.
func (m *FilterMutation) ClearUserFilters() {
	m.cleareduser_filters = true
}

// UserFiltersCleared reports if the "user_filters" edge to the UserFilter entity was cleared.
func (m *FilterMutation) UserFiltersCleared() bool {
	return m.cleareduser_filters
}

// RemoveUserFilterIDs removes the "user_filters" edge to the UserFilter entity by IDs.
func (m *FilterMutation) RemoveUserFilterIDs(ids ...int) {
	if m.removeduser_filters == nil {
		m.removeduser_filters = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_filters, ids[i])
		m.removeduser_filters[ids[i]] = struct{}{}
	}
}

// RemovedUserFilters returns the removed IDs of the "user_filters" edge to the UserFilter entity.
func (m *FilterMutation) RemovedUserFiltersIDs() (ids []int) {
	for id := range m.removeduser_filters {
		ids = append(ids, id)
	}
	return
}

// UserFiltersIDs returns the "user_filters" edge IDs in the mutation.
func (m *FilterMutation) UserFiltersIDs() (ids []int) {
	for id := range m.user_filters {
		ids = append(ids, id)
	}
	return
}

// ResetUserFilters resets all changes to the "user_filters" edge.
func (m *FilterMutation) ResetUserFilters() {
	m.user_filters = nil
	m.cleareduser_filters = false
	m.removeduser_filters = nil
}

// AddBenefitFilterIDs adds the "benefit_filters" edge to the BenefitFilter entity by ids.
func (m *FilterMutation) AddBenefitFilterIDs(ids ...int) {
	if m.benefit_filters == nil {
		m.benefit_filters = make(map[int]struct{})
	}
	for i := range ids {
		m.benefit_filters[ids[i]] = struct{}{}
	}
}

// ClearBenefitFilters clears the "benefit_filters" edge to the BenefitFilter entity.
func (m *FilterMutation) ClearBenefitFilters() {
	m.clearedbenefit_filters = true
}

// BenefitFiltersCleared reports if the "benefit_filters" edge to the BenefitFilter entity was cleared.
func (m *FilterMutation) BenefitFiltersCleared() bool {
	return m.clearedbenefit_filters
}

// RemoveBenefitFilterIDs removes the "benefit_filters" edge to the BenefitFilter entity by IDs.
func (m *FilterMutation) RemoveBenefitFilterIDs(ids ...int) {
	if m.removedbenefit_filters == nil {
		m.removedbenefit_filters = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.benefit_filters, ids[i])
		m.removedbenefit_filters[ids[i]] = struct{}{}
	}
}

// RemovedBenefitFilters returns the removed IDs of the "benefit_filters" edge to the BenefitFilter entity.
func (m *FilterMutation) RemovedBenefitFiltersIDs() (ids []int) {
	for id := range m.removedbenefit_filters {
		ids = append(ids, id)
	}
	return
}

// BenefitFiltersIDs returns the "benefit_filters" edge IDs in the mutation.
func (m *FilterMutation) BenefitFiltersIDs() (ids []int) {
	for id := range m.benefit_filters {
		ids = append(ids, id)
	}
	return
}

// ResetBenefitFilters resets all changes to the "benefit_filters" edge.
func (m *FilterMutation) ResetBenefitFilters() {
	m.benefit_filters = nil
	m.clearedbenefit_filters = false
	m.removedbenefit_filters = nil
}

// Where appends a list predicates to the FilterMutation builder.
func (m *FilterMutation) Where(ps ...predicate.Filter) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FilterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FilterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Filter, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FilterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FilterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Filter).
func (m *FilterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FilterMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, filter.FieldName)
	}
	if m.hint != nil {
		fields = append(fields, filter.FieldHint)
	}
	if m._type != nil {
		fields = append(fields, filter.FieldType)
	}
	if m.values != nil {
		fields = append(fields, filter.FieldValues)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FilterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case filter.FieldName:
		return m.Name()
	case filter.FieldHint:
		return m.Hint()
	case filter.FieldType:
		return m.GetType()
	case filter.FieldValues:
		return m.Values()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FilterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case filter.FieldName:
		return m.OldName(ctx)
	case filter.FieldHint:
		return m.OldHint(ctx)
	case filter.FieldType:
		return m.OldType(ctx)
	case filter.FieldValues:
		return m.OldValues(ctx)
	}
	return nil, fmt.Errorf("unknown Filter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FilterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case filter.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case filter.FieldHint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHint(v)
		return nil
	case filter.FieldType:
		v, ok := value.(filter.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case filter.FieldValues:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValues(v)
		return nil
	}
	return fmt.Errorf("unknown Filter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FilterMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FilterMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FilterMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Filter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FilterMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(filter.FieldHint) {
		fields = append(fields, filter.FieldHint)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FilterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FilterMutation) ClearField(name string) error {
	switch name {
	case filter.FieldHint:
		m.ClearHint()
		return nil
	}
	return fmt.Errorf("unknown Filter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FilterMutation) ResetField(name string) error {
	switch name {
	case filter.FieldName:
		m.ResetName()
		return nil
	case filter.FieldHint:
		m.ResetHint()
		return nil
	case filter.FieldType:
		m.ResetType()
		return nil
	case filter.FieldValues:
		m.ResetValues()
		return nil
	}
	return fmt.Errorf("unknown Filter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FilterMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user_filters != nil {
		edges = append(edges, filter.EdgeUserFilters)
	}
	if m.benefit_filters != nil {
		edges = append(edges, filter.EdgeBenefitFilters)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FilterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case filter.EdgeUserFilters:
		ids := make([]ent.Value, 0, len(m.user_filters))
		for id := range m.user_filters {
			ids = append(ids, id)
		}
		return ids
	case filter.EdgeBenefitFilters:
		ids := make([]ent.Value, 0, len(m.benefit_filters))
		for id := range m.benefit_filters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FilterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser_filters != nil {
		edges = append(edges, filter.EdgeUserFilters)
	}
	if m.removedbenefit_filters != nil {
		edges = append(edges, filter.EdgeBenefitFilters)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FilterMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case filter.EdgeUserFilters:
		ids := make([]ent.Value, 0, len(m.removeduser_filters))
		for id := range m.removeduser_filters {
			ids = append(ids, id)
		}
		return ids
	case filter.EdgeBenefitFilters:
		ids := make([]ent.Value, 0, len(m.removedbenefit_filters))
		for id := range m.removedbenefit_filters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FilterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser_filters {
		edges = append(edges, filter.EdgeUserFilters)
	}
	if m.clearedbenefit_filters {
		edges = append(edges, filter.EdgeBenefitFilters)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FilterMutation) EdgeCleared(name string) bool {
	switch name {
	case filter.EdgeUserFilters:
		return m.cleareduser_filters
	case filter.EdgeBenefitFilters:
		return m.clearedbenefit_filters
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FilterMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Filter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FilterMutation) ResetEdge(name string) error {
	switch name {
	case filter.EdgeUserFilters:
		m.ResetUserFilters()
		return nil
	case filter.EdgeBenefitFilters:
		m.ResetBenefitFilters()
		return nil
	}
	return fmt.Errorf("unknown Filter edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	first_name          *string
	last_name           *string
	birth_date          *time.Time
	email               *string
	password            *string
	created_at          *time.Time
	clearedFields       map[string]struct{}
	user_filters        map[int]struct{}
	removeduser_filters map[int]struct{}
	cleareduser_filters bool
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetBirthDate sets the "birth_date" field.
func (m *UserMutation) SetBirthDate(t time.Time) {
	m.birth_date = &t
}

// BirthDate returns the value of the "birth_date" field in the mutation.
func (m *UserMutation) BirthDate() (r time.Time, exists bool) {
	v := m.birth_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthDate returns the old "birth_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBirthDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthDate: %w", err)
	}
	return oldValue.BirthDate, nil
}

// ClearBirthDate clears the value of the "birth_date" field.
func (m *UserMutation) ClearBirthDate() {
	m.birth_date = nil
	m.clearedFields[user.FieldBirthDate] = struct{}{}
}

// BirthDateCleared returns if the "birth_date" field was cleared in this mutation.
func (m *UserMutation) BirthDateCleared() bool {
	_, ok := m.clearedFields[user.FieldBirthDate]
	return ok
}

// ResetBirthDate resets all changes to the "birth_date" field.
func (m *UserMutation) ResetBirthDate() {
	m.birth_date = nil
	delete(m.clearedFields, user.FieldBirthDate)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddUserFilterIDs adds the "user_filters" edge to the UserFilter entity by ids.
func (m *UserMutation) AddUserFilterIDs(ids ...int) {
	if m.user_filters == nil {
		m.user_filters = make(map[int]struct{})
	}
	for i := range ids {
		m.user_filters[ids[i]] = struct{}{}
	}
}

// ClearUserFilters clears the "user_filters" edge to the UserFilter entity.
func (m *UserMutation) ClearUserFilters() {
	m.cleareduser_filters = true
}

// UserFiltersCleared reports if the "user_filters" edge to the UserFilter entity was cleared.
func (m *UserMutation) UserFiltersCleared() bool {
	return m.cleareduser_filters
}

// RemoveUserFilterIDs removes the "user_filters" edge to the UserFilter entity by IDs.
func (m *UserMutation) RemoveUserFilterIDs(ids ...int) {
	if m.removeduser_filters == nil {
		m.removeduser_filters = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_filters, ids[i])
		m.removeduser_filters[ids[i]] = struct{}{}
	}
}

// RemovedUserFilters returns the removed IDs of the "user_filters" edge to the UserFilter entity.
func (m *UserMutation) RemovedUserFiltersIDs() (ids []int) {
	for id := range m.removeduser_filters {
		ids = append(ids, id)
	}
	return
}

// UserFiltersIDs returns the "user_filters" edge IDs in the mutation.
func (m *UserMutation) UserFiltersIDs() (ids []int) {
	for id := range m.user_filters {
		ids = append(ids, id)
	}
	return
}

// ResetUserFilters resets all changes to the "user_filters" edge.
func (m *UserMutation) ResetUserFilters() {
	m.user_filters = nil
	m.cleareduser_filters = false
	m.removeduser_filters = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.birth_date != nil {
		fields = append(fields, user.FieldBirthDate)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldBirthDate:
		return m.BirthDate()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldBirthDate:
		return m.OldBirthDate(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldBirthDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthDate(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldBirthDate) {
		fields = append(fields, user.FieldBirthDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldBirthDate:
		m.ClearBirthDate()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldBirthDate:
		m.ResetBirthDate()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user_filters != nil {
		edges = append(edges, user.EdgeUserFilters)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserFilters:
		ids := make([]ent.Value, 0, len(m.user_filters))
		for id := range m.user_filters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeduser_filters != nil {
		edges = append(edges, user.EdgeUserFilters)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserFilters:
		ids := make([]ent.Value, 0, len(m.removeduser_filters))
		for id := range m.removeduser_filters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser_filters {
		edges = append(edges, user.EdgeUserFilters)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserFilters:
		return m.cleareduser_filters
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserFilters:
		m.ResetUserFilters()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserFilterMutation represents an operation that mutates the UserFilter nodes in the graph.
type UserFilterMutation struct {
	config
	op            Op
	typ           string
	id            *int
	value         *string
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	filter        *int
	clearedfilter bool
	done          bool
	oldValue      func(context.Context) (*UserFilter, error)
	predicates    []predicate.UserFilter
}

var _ ent.Mutation = (*UserFilterMutation)(nil)

// userfilterOption allows management of the mutation configuration using functional options.
type userfilterOption func(*UserFilterMutation)

// newUserFilterMutation creates new mutation for the UserFilter entity.
func newUserFilterMutation(c config, op Op, opts ...userfilterOption) *UserFilterMutation {
	m := &UserFilterMutation{
		config:        c,
		op:            op,
		typ:           TypeUserFilter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserFilterID sets the ID field of the mutation.
func withUserFilterID(id int) userfilterOption {
	return func(m *UserFilterMutation) {
		var (
			err   error
			once  sync.Once
			value *UserFilter
		)
		m.oldValue = func(ctx context.Context) (*UserFilter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserFilter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserFilter sets the old UserFilter of the mutation.
func withUserFilter(node *UserFilter) userfilterOption {
	return func(m *UserFilterMutation) {
		m.oldValue = func(context.Context) (*UserFilter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserFilterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserFilterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserFilterMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserFilterMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserFilter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserFilterMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserFilterMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserFilter entity.
// If the UserFilter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserFilterMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserFilterMutation) ResetUserID() {
	m.user = nil
}

// SetFilterID sets the "filter_id" field.
func (m *UserFilterMutation) SetFilterID(i int) {
	m.filter = &i
}

// FilterID returns the value of the "filter_id" field in the mutation.
func (m *UserFilterMutation) FilterID() (r int, exists bool) {
	v := m.filter
	if v == nil {
		return
	}
	return *v, true
}

// OldFilterID returns the old "filter_id" field's value of the UserFilter entity.
// If the UserFilter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserFilterMutation) OldFilterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilterID: %w", err)
	}
	return oldValue.FilterID, nil
}

// ResetFilterID resets all changes to the "filter_id" field.
func (m *UserFilterMutation) ResetFilterID() {
	m.filter = nil
}

// SetValue sets the "value" field.
func (m *UserFilterMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *UserFilterMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the UserFilter entity.
// If the UserFilter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserFilterMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *UserFilterMutation) ResetValue() {
	m.value = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserFilterMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[userfilter.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserFilterMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserFilterMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserFilterMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearFilter clears the "filter" edge to the Filter entity.
func (m *UserFilterMutation) ClearFilter() {
	m.clearedfilter = true
	m.clearedFields[userfilter.FieldFilterID] = struct{}{}
}

// FilterCleared reports if the "filter" edge to the Filter entity was cleared.
func (m *UserFilterMutation) FilterCleared() bool {
	return m.clearedfilter
}

// FilterIDs returns the "filter" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FilterID instead. It exists only for internal usage by the builders.
func (m *UserFilterMutation) FilterIDs() (ids []int) {
	if id := m.filter; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFilter resets all changes to the "filter" edge.
func (m *UserFilterMutation) ResetFilter() {
	m.filter = nil
	m.clearedfilter = false
}

// Where appends a list predicates to the UserFilterMutation builder.
func (m *UserFilterMutation) Where(ps ...predicate.UserFilter) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserFilterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserFilterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserFilter, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserFilterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserFilterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserFilter).
func (m *UserFilterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserFilterMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, userfilter.FieldUserID)
	}
	if m.filter != nil {
		fields = append(fields, userfilter.FieldFilterID)
	}
	if m.value != nil {
		fields = append(fields, userfilter.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserFilterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userfilter.FieldUserID:
		return m.UserID()
	case userfilter.FieldFilterID:
		return m.FilterID()
	case userfilter.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserFilterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userfilter.FieldUserID:
		return m.OldUserID(ctx)
	case userfilter.FieldFilterID:
		return m.OldFilterID(ctx)
	case userfilter.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown UserFilter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserFilterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userfilter.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userfilter.FieldFilterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilterID(v)
		return nil
	case userfilter.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown UserFilter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserFilterMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserFilterMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserFilterMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserFilter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserFilterMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserFilterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserFilterMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserFilter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserFilterMutation) ResetField(name string) error {
	switch name {
	case userfilter.FieldUserID:
		m.ResetUserID()
		return nil
	case userfilter.FieldFilterID:
		m.ResetFilterID()
		return nil
	case userfilter.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown UserFilter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserFilterMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, userfilter.EdgeUser)
	}
	if m.filter != nil {
		edges = append(edges, userfilter.EdgeFilter)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserFilterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userfilter.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case userfilter.EdgeFilter:
		if id := m.filter; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserFilterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserFilterMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserFilterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, userfilter.EdgeUser)
	}
	if m.clearedfilter {
		edges = append(edges, userfilter.EdgeFilter)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserFilterMutation) EdgeCleared(name string) bool {
	switch name {
	case userfilter.EdgeUser:
		return m.cleareduser
	case userfilter.EdgeFilter:
		return m.clearedfilter
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserFilterMutation) ClearEdge(name string) error {
	switch name {
	case userfilter.EdgeUser:
		m.ClearUser()
		return nil
	case userfilter.EdgeFilter:
		m.ClearFilter()
		return nil
	}
	return fmt.Errorf("unknown UserFilter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserFilterMutation) ResetEdge(name string) error {
	switch name {
	case userfilter.EdgeUser:
		m.ResetUser()
		return nil
	case userfilter.EdgeFilter:
		m.ResetFilter()
		return nil
	}
	return fmt.Errorf("unknown UserFilter edge %s", name)
}
