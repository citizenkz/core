// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/citizenkz/core/ent/benefit"
)

// Benefit is the model entity for the Benefit schema.
type Benefit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Bonus holds the value of the "bonus" field.
	Bonus string `json:"bonus,omitempty"`
	// VideoURL holds the value of the "video_url" field.
	VideoURL *string `json:"video_url,omitempty"`
	// SourceURL holds the value of the "source_url" field.
	SourceURL *string `json:"source_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BenefitQuery when eager-loading is set.
	Edges        BenefitEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BenefitEdges holds the relations/edges for other nodes in the graph.
type BenefitEdges struct {
	// BenefitFilters holds the value of the benefit_filters edge.
	BenefitFilters []*BenefitFilter `json:"benefit_filters,omitempty"`
	// BenefitCategories holds the value of the benefit_categories edge.
	BenefitCategories []*BenefitCategory `json:"benefit_categories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BenefitFiltersOrErr returns the BenefitFilters value or an error if the edge
// was not loaded in eager-loading.
func (e BenefitEdges) BenefitFiltersOrErr() ([]*BenefitFilter, error) {
	if e.loadedTypes[0] {
		return e.BenefitFilters, nil
	}
	return nil, &NotLoadedError{edge: "benefit_filters"}
}

// BenefitCategoriesOrErr returns the BenefitCategories value or an error if the edge
// was not loaded in eager-loading.
func (e BenefitEdges) BenefitCategoriesOrErr() ([]*BenefitCategory, error) {
	if e.loadedTypes[1] {
		return e.BenefitCategories, nil
	}
	return nil, &NotLoadedError{edge: "benefit_categories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Benefit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case benefit.FieldID:
			values[i] = new(sql.NullInt64)
		case benefit.FieldTitle, benefit.FieldContent, benefit.FieldBonus, benefit.FieldVideoURL, benefit.FieldSourceURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Benefit fields.
func (_m *Benefit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case benefit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case benefit.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case benefit.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				_m.Content = value.String
			}
		case benefit.FieldBonus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bonus", values[i])
			} else if value.Valid {
				_m.Bonus = value.String
			}
		case benefit.FieldVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_url", values[i])
			} else if value.Valid {
				_m.VideoURL = new(string)
				*_m.VideoURL = value.String
			}
		case benefit.FieldSourceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_url", values[i])
			} else if value.Valid {
				_m.SourceURL = new(string)
				*_m.SourceURL = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Benefit.
// This includes values selected through modifiers, order, etc.
func (_m *Benefit) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBenefitFilters queries the "benefit_filters" edge of the Benefit entity.
func (_m *Benefit) QueryBenefitFilters() *BenefitFilterQuery {
	return NewBenefitClient(_m.config).QueryBenefitFilters(_m)
}

// QueryBenefitCategories queries the "benefit_categories" edge of the Benefit entity.
func (_m *Benefit) QueryBenefitCategories() *BenefitCategoryQuery {
	return NewBenefitClient(_m.config).QueryBenefitCategories(_m)
}

// Update returns a builder for updating this Benefit.
// Note that you need to call Benefit.Unwrap() before calling this method if this Benefit
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Benefit) Update() *BenefitUpdateOne {
	return NewBenefitClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Benefit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Benefit) Unwrap() *Benefit {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Benefit is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Benefit) String() string {
	var builder strings.Builder
	builder.WriteString("Benefit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(_m.Content)
	builder.WriteString(", ")
	builder.WriteString("bonus=")
	builder.WriteString(_m.Bonus)
	builder.WriteString(", ")
	if v := _m.VideoURL; v != nil {
		builder.WriteString("video_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.SourceURL; v != nil {
		builder.WriteString("source_url=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Benefits is a parsable slice of Benefit.
type Benefits []*Benefit
