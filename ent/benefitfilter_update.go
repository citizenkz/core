// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/citizenkz/core/ent/benefit"
	"github.com/citizenkz/core/ent/benefitfilter"
	"github.com/citizenkz/core/ent/filter"
	"github.com/citizenkz/core/ent/predicate"
)

// BenefitFilterUpdate is the builder for updating BenefitFilter entities.
type BenefitFilterUpdate struct {
	config
	hooks    []Hook
	mutation *BenefitFilterMutation
}

// Where appends a list predicates to the BenefitFilterUpdate builder.
func (_u *BenefitFilterUpdate) Where(ps ...predicate.BenefitFilter) *BenefitFilterUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetBenefitID sets the "benefit_id" field.
func (_u *BenefitFilterUpdate) SetBenefitID(v int) *BenefitFilterUpdate {
	_u.mutation.SetBenefitID(v)
	return _u
}

// SetNillableBenefitID sets the "benefit_id" field if the given value is not nil.
func (_u *BenefitFilterUpdate) SetNillableBenefitID(v *int) *BenefitFilterUpdate {
	if v != nil {
		_u.SetBenefitID(*v)
	}
	return _u
}

// SetFilterID sets the "filter_id" field.
func (_u *BenefitFilterUpdate) SetFilterID(v int) *BenefitFilterUpdate {
	_u.mutation.SetFilterID(v)
	return _u
}

// SetNillableFilterID sets the "filter_id" field if the given value is not nil.
func (_u *BenefitFilterUpdate) SetNillableFilterID(v *int) *BenefitFilterUpdate {
	if v != nil {
		_u.SetFilterID(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *BenefitFilterUpdate) SetValue(v string) *BenefitFilterUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *BenefitFilterUpdate) SetNillableValue(v *string) *BenefitFilterUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *BenefitFilterUpdate) ClearValue() *BenefitFilterUpdate {
	_u.mutation.ClearValue()
	return _u
}

// SetFrom sets the "from" field.
func (_u *BenefitFilterUpdate) SetFrom(v string) *BenefitFilterUpdate {
	_u.mutation.SetFrom(v)
	return _u
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (_u *BenefitFilterUpdate) SetNillableFrom(v *string) *BenefitFilterUpdate {
	if v != nil {
		_u.SetFrom(*v)
	}
	return _u
}

// ClearFrom clears the value of the "from" field.
func (_u *BenefitFilterUpdate) ClearFrom() *BenefitFilterUpdate {
	_u.mutation.ClearFrom()
	return _u
}

// SetTo sets the "to" field.
func (_u *BenefitFilterUpdate) SetTo(v string) *BenefitFilterUpdate {
	_u.mutation.SetTo(v)
	return _u
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (_u *BenefitFilterUpdate) SetNillableTo(v *string) *BenefitFilterUpdate {
	if v != nil {
		_u.SetTo(*v)
	}
	return _u
}

// ClearTo clears the value of the "to" field.
func (_u *BenefitFilterUpdate) ClearTo() *BenefitFilterUpdate {
	_u.mutation.ClearTo()
	return _u
}

// SetBenefit sets the "benefit" edge to the Benefit entity.
func (_u *BenefitFilterUpdate) SetBenefit(v *Benefit) *BenefitFilterUpdate {
	return _u.SetBenefitID(v.ID)
}

// SetFilter sets the "filter" edge to the Filter entity.
func (_u *BenefitFilterUpdate) SetFilter(v *Filter) *BenefitFilterUpdate {
	return _u.SetFilterID(v.ID)
}

// Mutation returns the BenefitFilterMutation object of the builder.
func (_u *BenefitFilterUpdate) Mutation() *BenefitFilterMutation {
	return _u.mutation
}

// ClearBenefit clears the "benefit" edge to the Benefit entity.
func (_u *BenefitFilterUpdate) ClearBenefit() *BenefitFilterUpdate {
	_u.mutation.ClearBenefit()
	return _u
}

// ClearFilter clears the "filter" edge to the Filter entity.
func (_u *BenefitFilterUpdate) ClearFilter() *BenefitFilterUpdate {
	_u.mutation.ClearFilter()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BenefitFilterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BenefitFilterUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BenefitFilterUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BenefitFilterUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BenefitFilterUpdate) check() error {
	if _u.mutation.BenefitCleared() && len(_u.mutation.BenefitIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BenefitFilter.benefit"`)
	}
	if _u.mutation.FilterCleared() && len(_u.mutation.FilterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BenefitFilter.filter"`)
	}
	return nil
}

func (_u *BenefitFilterUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(benefitfilter.Table, benefitfilter.Columns, sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(benefitfilter.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(benefitfilter.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.From(); ok {
		_spec.SetField(benefitfilter.FieldFrom, field.TypeString, value)
	}
	if _u.mutation.FromCleared() {
		_spec.ClearField(benefitfilter.FieldFrom, field.TypeString)
	}
	if value, ok := _u.mutation.To(); ok {
		_spec.SetField(benefitfilter.FieldTo, field.TypeString, value)
	}
	if _u.mutation.ToCleared() {
		_spec.ClearField(benefitfilter.FieldTo, field.TypeString)
	}
	if _u.mutation.BenefitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   benefitfilter.BenefitTable,
			Columns: []string{benefitfilter.BenefitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BenefitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   benefitfilter.BenefitTable,
			Columns: []string{benefitfilter.BenefitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   benefitfilter.FilterTable,
			Columns: []string{benefitfilter.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   benefitfilter.FilterTable,
			Columns: []string{benefitfilter.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{benefitfilter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BenefitFilterUpdateOne is the builder for updating a single BenefitFilter entity.
type BenefitFilterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BenefitFilterMutation
}

// SetBenefitID sets the "benefit_id" field.
func (_u *BenefitFilterUpdateOne) SetBenefitID(v int) *BenefitFilterUpdateOne {
	_u.mutation.SetBenefitID(v)
	return _u
}

// SetNillableBenefitID sets the "benefit_id" field if the given value is not nil.
func (_u *BenefitFilterUpdateOne) SetNillableBenefitID(v *int) *BenefitFilterUpdateOne {
	if v != nil {
		_u.SetBenefitID(*v)
	}
	return _u
}

// SetFilterID sets the "filter_id" field.
func (_u *BenefitFilterUpdateOne) SetFilterID(v int) *BenefitFilterUpdateOne {
	_u.mutation.SetFilterID(v)
	return _u
}

// SetNillableFilterID sets the "filter_id" field if the given value is not nil.
func (_u *BenefitFilterUpdateOne) SetNillableFilterID(v *int) *BenefitFilterUpdateOne {
	if v != nil {
		_u.SetFilterID(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *BenefitFilterUpdateOne) SetValue(v string) *BenefitFilterUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *BenefitFilterUpdateOne) SetNillableValue(v *string) *BenefitFilterUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// ClearValue clears the value of the "value" field.
func (_u *BenefitFilterUpdateOne) ClearValue() *BenefitFilterUpdateOne {
	_u.mutation.ClearValue()
	return _u
}

// SetFrom sets the "from" field.
func (_u *BenefitFilterUpdateOne) SetFrom(v string) *BenefitFilterUpdateOne {
	_u.mutation.SetFrom(v)
	return _u
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (_u *BenefitFilterUpdateOne) SetNillableFrom(v *string) *BenefitFilterUpdateOne {
	if v != nil {
		_u.SetFrom(*v)
	}
	return _u
}

// ClearFrom clears the value of the "from" field.
func (_u *BenefitFilterUpdateOne) ClearFrom() *BenefitFilterUpdateOne {
	_u.mutation.ClearFrom()
	return _u
}

// SetTo sets the "to" field.
func (_u *BenefitFilterUpdateOne) SetTo(v string) *BenefitFilterUpdateOne {
	_u.mutation.SetTo(v)
	return _u
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (_u *BenefitFilterUpdateOne) SetNillableTo(v *string) *BenefitFilterUpdateOne {
	if v != nil {
		_u.SetTo(*v)
	}
	return _u
}

// ClearTo clears the value of the "to" field.
func (_u *BenefitFilterUpdateOne) ClearTo() *BenefitFilterUpdateOne {
	_u.mutation.ClearTo()
	return _u
}

// SetBenefit sets the "benefit" edge to the Benefit entity.
func (_u *BenefitFilterUpdateOne) SetBenefit(v *Benefit) *BenefitFilterUpdateOne {
	return _u.SetBenefitID(v.ID)
}

// SetFilter sets the "filter" edge to the Filter entity.
func (_u *BenefitFilterUpdateOne) SetFilter(v *Filter) *BenefitFilterUpdateOne {
	return _u.SetFilterID(v.ID)
}

// Mutation returns the BenefitFilterMutation object of the builder.
func (_u *BenefitFilterUpdateOne) Mutation() *BenefitFilterMutation {
	return _u.mutation
}

// ClearBenefit clears the "benefit" edge to the Benefit entity.
func (_u *BenefitFilterUpdateOne) ClearBenefit() *BenefitFilterUpdateOne {
	_u.mutation.ClearBenefit()
	return _u
}

// ClearFilter clears the "filter" edge to the Filter entity.
func (_u *BenefitFilterUpdateOne) ClearFilter() *BenefitFilterUpdateOne {
	_u.mutation.ClearFilter()
	return _u
}

// Where appends a list predicates to the BenefitFilterUpdate builder.
func (_u *BenefitFilterUpdateOne) Where(ps ...predicate.BenefitFilter) *BenefitFilterUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BenefitFilterUpdateOne) Select(field string, fields ...string) *BenefitFilterUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated BenefitFilter entity.
func (_u *BenefitFilterUpdateOne) Save(ctx context.Context) (*BenefitFilter, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BenefitFilterUpdateOne) SaveX(ctx context.Context) *BenefitFilter {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BenefitFilterUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BenefitFilterUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *BenefitFilterUpdateOne) check() error {
	if _u.mutation.BenefitCleared() && len(_u.mutation.BenefitIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BenefitFilter.benefit"`)
	}
	if _u.mutation.FilterCleared() && len(_u.mutation.FilterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BenefitFilter.filter"`)
	}
	return nil
}

func (_u *BenefitFilterUpdateOne) sqlSave(ctx context.Context) (_node *BenefitFilter, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(benefitfilter.Table, benefitfilter.Columns, sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BenefitFilter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, benefitfilter.FieldID)
		for _, f := range fields {
			if !benefitfilter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != benefitfilter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(benefitfilter.FieldValue, field.TypeString, value)
	}
	if _u.mutation.ValueCleared() {
		_spec.ClearField(benefitfilter.FieldValue, field.TypeString)
	}
	if value, ok := _u.mutation.From(); ok {
		_spec.SetField(benefitfilter.FieldFrom, field.TypeString, value)
	}
	if _u.mutation.FromCleared() {
		_spec.ClearField(benefitfilter.FieldFrom, field.TypeString)
	}
	if value, ok := _u.mutation.To(); ok {
		_spec.SetField(benefitfilter.FieldTo, field.TypeString, value)
	}
	if _u.mutation.ToCleared() {
		_spec.ClearField(benefitfilter.FieldTo, field.TypeString)
	}
	if _u.mutation.BenefitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   benefitfilter.BenefitTable,
			Columns: []string{benefitfilter.BenefitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefit.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BenefitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   benefitfilter.BenefitTable,
			Columns: []string{benefitfilter.BenefitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   benefitfilter.FilterTable,
			Columns: []string{benefitfilter.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   benefitfilter.FilterTable,
			Columns: []string{benefitfilter.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BenefitFilter{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{benefitfilter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
