// Code generated by ent, DO NOT EDIT.

package category

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeBenefitCategories holds the string denoting the benefit_categories edge name in mutations.
	EdgeBenefitCategories = "benefit_categories"
	// Table holds the table name of the category in the database.
	Table = "categories"
	// BenefitCategoriesTable is the table that holds the benefit_categories relation/edge.
	BenefitCategoriesTable = "benefit_categories"
	// BenefitCategoriesInverseTable is the table name for the BenefitCategory entity.
	// It exists in this package in order to avoid circular dependency with the "benefitcategory" package.
	BenefitCategoriesInverseTable = "benefit_categories"
	// BenefitCategoriesColumn is the table column denoting the benefit_categories relation/edge.
	BenefitCategoriesColumn = "category_id"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Category queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByBenefitCategoriesCount orders the results by benefit_categories count.
func ByBenefitCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBenefitCategoriesStep(), opts...)
	}
}

// ByBenefitCategories orders the results by benefit_categories terms.
func ByBenefitCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBenefitCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBenefitCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BenefitCategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BenefitCategoriesTable, BenefitCategoriesColumn),
	)
}
