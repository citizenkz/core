// Code generated by ent, DO NOT EDIT.

package filter

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the filter type in the database.
	Label = "filter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldHint holds the string denoting the hint field in the database.
	FieldHint = "hint"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldValues holds the string denoting the values field in the database.
	FieldValues = "values"
	// EdgeUserFilters holds the string denoting the user_filters edge name in mutations.
	EdgeUserFilters = "user_filters"
	// EdgeBenefitFilters holds the string denoting the benefit_filters edge name in mutations.
	EdgeBenefitFilters = "benefit_filters"
	// EdgeChildFilters holds the string denoting the child_filters edge name in mutations.
	EdgeChildFilters = "child_filters"
	// Table holds the table name of the filter in the database.
	Table = "filters"
	// UserFiltersTable is the table that holds the user_filters relation/edge.
	UserFiltersTable = "user_filters"
	// UserFiltersInverseTable is the table name for the UserFilter entity.
	// It exists in this package in order to avoid circular dependency with the "userfilter" package.
	UserFiltersInverseTable = "user_filters"
	// UserFiltersColumn is the table column denoting the user_filters relation/edge.
	UserFiltersColumn = "filter_id"
	// BenefitFiltersTable is the table that holds the benefit_filters relation/edge.
	BenefitFiltersTable = "benefit_filters"
	// BenefitFiltersInverseTable is the table name for the BenefitFilter entity.
	// It exists in this package in order to avoid circular dependency with the "benefitfilter" package.
	BenefitFiltersInverseTable = "benefit_filters"
	// BenefitFiltersColumn is the table column denoting the benefit_filters relation/edge.
	BenefitFiltersColumn = "filter_id"
	// ChildFiltersTable is the table that holds the child_filters relation/edge.
	ChildFiltersTable = "child_filters"
	// ChildFiltersInverseTable is the table name for the ChildFilter entity.
	// It exists in this package in order to avoid circular dependency with the "childfilter" package.
	ChildFiltersInverseTable = "child_filters"
	// ChildFiltersColumn is the table column denoting the child_filters relation/edge.
	ChildFiltersColumn = "filter_id"
)

// Columns holds all SQL columns for filter fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldHint,
	FieldType,
	FieldValues,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeDATE_RANGE   Type = "DATE_RANGE"
	TypeNUMBER_RANGE Type = "NUMBER_RANGE"
	TypeSTRING_RANGE Type = "STRING_RANGE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeDATE_RANGE, TypeNUMBER_RANGE, TypeSTRING_RANGE:
		return nil
	default:
		return fmt.Errorf("filter: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Filter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByHint orders the results by the hint field.
func ByHint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHint, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByUserFiltersCount orders the results by user_filters count.
func ByUserFiltersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserFiltersStep(), opts...)
	}
}

// ByUserFilters orders the results by user_filters terms.
func ByUserFilters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserFiltersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBenefitFiltersCount orders the results by benefit_filters count.
func ByBenefitFiltersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBenefitFiltersStep(), opts...)
	}
}

// ByBenefitFilters orders the results by benefit_filters terms.
func ByBenefitFilters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBenefitFiltersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChildFiltersCount orders the results by child_filters count.
func ByChildFiltersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildFiltersStep(), opts...)
	}
}

// ByChildFilters orders the results by child_filters terms.
func ByChildFilters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildFiltersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserFiltersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserFiltersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserFiltersTable, UserFiltersColumn),
	)
}
func newBenefitFiltersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BenefitFiltersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BenefitFiltersTable, BenefitFiltersColumn),
	)
}
func newChildFiltersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChildFiltersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildFiltersTable, ChildFiltersColumn),
	)
}
