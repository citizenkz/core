// Code generated by ent, DO NOT EDIT.

package filter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/citizenkz/core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Filter {
	return predicate.Filter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Filter {
	return predicate.Filter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Filter {
	return predicate.Filter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Filter {
	return predicate.Filter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Filter {
	return predicate.Filter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Filter {
	return predicate.Filter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Filter {
	return predicate.Filter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Filter {
	return predicate.Filter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Filter {
	return predicate.Filter(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Filter {
	return predicate.Filter(sql.FieldEQ(FieldName, v))
}

// Hint applies equality check predicate on the "hint" field. It's identical to HintEQ.
func Hint(v string) predicate.Filter {
	return predicate.Filter(sql.FieldEQ(FieldHint, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Filter {
	return predicate.Filter(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Filter {
	return predicate.Filter(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Filter {
	return predicate.Filter(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Filter {
	return predicate.Filter(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Filter {
	return predicate.Filter(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Filter {
	return predicate.Filter(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Filter {
	return predicate.Filter(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Filter {
	return predicate.Filter(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Filter {
	return predicate.Filter(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Filter {
	return predicate.Filter(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Filter {
	return predicate.Filter(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Filter {
	return predicate.Filter(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Filter {
	return predicate.Filter(sql.FieldContainsFold(FieldName, v))
}

// HintEQ applies the EQ predicate on the "hint" field.
func HintEQ(v string) predicate.Filter {
	return predicate.Filter(sql.FieldEQ(FieldHint, v))
}

// HintNEQ applies the NEQ predicate on the "hint" field.
func HintNEQ(v string) predicate.Filter {
	return predicate.Filter(sql.FieldNEQ(FieldHint, v))
}

// HintIn applies the In predicate on the "hint" field.
func HintIn(vs ...string) predicate.Filter {
	return predicate.Filter(sql.FieldIn(FieldHint, vs...))
}

// HintNotIn applies the NotIn predicate on the "hint" field.
func HintNotIn(vs ...string) predicate.Filter {
	return predicate.Filter(sql.FieldNotIn(FieldHint, vs...))
}

// HintGT applies the GT predicate on the "hint" field.
func HintGT(v string) predicate.Filter {
	return predicate.Filter(sql.FieldGT(FieldHint, v))
}

// HintGTE applies the GTE predicate on the "hint" field.
func HintGTE(v string) predicate.Filter {
	return predicate.Filter(sql.FieldGTE(FieldHint, v))
}

// HintLT applies the LT predicate on the "hint" field.
func HintLT(v string) predicate.Filter {
	return predicate.Filter(sql.FieldLT(FieldHint, v))
}

// HintLTE applies the LTE predicate on the "hint" field.
func HintLTE(v string) predicate.Filter {
	return predicate.Filter(sql.FieldLTE(FieldHint, v))
}

// HintContains applies the Contains predicate on the "hint" field.
func HintContains(v string) predicate.Filter {
	return predicate.Filter(sql.FieldContains(FieldHint, v))
}

// HintHasPrefix applies the HasPrefix predicate on the "hint" field.
func HintHasPrefix(v string) predicate.Filter {
	return predicate.Filter(sql.FieldHasPrefix(FieldHint, v))
}

// HintHasSuffix applies the HasSuffix predicate on the "hint" field.
func HintHasSuffix(v string) predicate.Filter {
	return predicate.Filter(sql.FieldHasSuffix(FieldHint, v))
}

// HintIsNil applies the IsNil predicate on the "hint" field.
func HintIsNil() predicate.Filter {
	return predicate.Filter(sql.FieldIsNull(FieldHint))
}

// HintNotNil applies the NotNil predicate on the "hint" field.
func HintNotNil() predicate.Filter {
	return predicate.Filter(sql.FieldNotNull(FieldHint))
}

// HintEqualFold applies the EqualFold predicate on the "hint" field.
func HintEqualFold(v string) predicate.Filter {
	return predicate.Filter(sql.FieldEqualFold(FieldHint, v))
}

// HintContainsFold applies the ContainsFold predicate on the "hint" field.
func HintContainsFold(v string) predicate.Filter {
	return predicate.Filter(sql.FieldContainsFold(FieldHint, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Filter {
	return predicate.Filter(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Filter {
	return predicate.Filter(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Filter {
	return predicate.Filter(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Filter {
	return predicate.Filter(sql.FieldNotIn(FieldType, vs...))
}

// HasUserFilters applies the HasEdge predicate on the "user_filters" edge.
func HasUserFilters() predicate.Filter {
	return predicate.Filter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserFiltersTable, UserFiltersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserFiltersWith applies the HasEdge predicate on the "user_filters" edge with a given conditions (other predicates).
func HasUserFiltersWith(preds ...predicate.UserFilter) predicate.Filter {
	return predicate.Filter(func(s *sql.Selector) {
		step := newUserFiltersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBenefitFilters applies the HasEdge predicate on the "benefit_filters" edge.
func HasBenefitFilters() predicate.Filter {
	return predicate.Filter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BenefitFiltersTable, BenefitFiltersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBenefitFiltersWith applies the HasEdge predicate on the "benefit_filters" edge with a given conditions (other predicates).
func HasBenefitFiltersWith(preds ...predicate.BenefitFilter) predicate.Filter {
	return predicate.Filter(func(s *sql.Selector) {
		step := newBenefitFiltersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Filter) predicate.Filter {
	return predicate.Filter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Filter) predicate.Filter {
	return predicate.Filter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Filter) predicate.Filter {
	return predicate.Filter(sql.NotPredicates(p))
}
