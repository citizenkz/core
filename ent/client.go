// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/citizenkz/core/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/citizenkz/core/ent/attempt"
	"github.com/citizenkz/core/ent/benefit"
	"github.com/citizenkz/core/ent/benefitfilter"
	"github.com/citizenkz/core/ent/filter"
	"github.com/citizenkz/core/ent/user"
	"github.com/citizenkz/core/ent/userfilter"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Attempt is the client for interacting with the Attempt builders.
	Attempt *AttemptClient
	// Benefit is the client for interacting with the Benefit builders.
	Benefit *BenefitClient
	// BenefitFilter is the client for interacting with the BenefitFilter builders.
	BenefitFilter *BenefitFilterClient
	// Filter is the client for interacting with the Filter builders.
	Filter *FilterClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserFilter is the client for interacting with the UserFilter builders.
	UserFilter *UserFilterClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Attempt = NewAttemptClient(c.config)
	c.Benefit = NewBenefitClient(c.config)
	c.BenefitFilter = NewBenefitFilterClient(c.config)
	c.Filter = NewFilterClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserFilter = NewUserFilterClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Attempt:       NewAttemptClient(cfg),
		Benefit:       NewBenefitClient(cfg),
		BenefitFilter: NewBenefitFilterClient(cfg),
		Filter:        NewFilterClient(cfg),
		User:          NewUserClient(cfg),
		UserFilter:    NewUserFilterClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Attempt:       NewAttemptClient(cfg),
		Benefit:       NewBenefitClient(cfg),
		BenefitFilter: NewBenefitFilterClient(cfg),
		Filter:        NewFilterClient(cfg),
		User:          NewUserClient(cfg),
		UserFilter:    NewUserFilterClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Attempt.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Attempt, c.Benefit, c.BenefitFilter, c.Filter, c.User, c.UserFilter,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Attempt, c.Benefit, c.BenefitFilter, c.Filter, c.User, c.UserFilter,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AttemptMutation:
		return c.Attempt.mutate(ctx, m)
	case *BenefitMutation:
		return c.Benefit.mutate(ctx, m)
	case *BenefitFilterMutation:
		return c.BenefitFilter.mutate(ctx, m)
	case *FilterMutation:
		return c.Filter.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserFilterMutation:
		return c.UserFilter.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AttemptClient is a client for the Attempt schema.
type AttemptClient struct {
	config
}

// NewAttemptClient returns a client for the Attempt from the given config.
func NewAttemptClient(c config) *AttemptClient {
	return &AttemptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attempt.Hooks(f(g(h())))`.
func (c *AttemptClient) Use(hooks ...Hook) {
	c.hooks.Attempt = append(c.hooks.Attempt, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attempt.Intercept(f(g(h())))`.
func (c *AttemptClient) Intercept(interceptors ...Interceptor) {
	c.inters.Attempt = append(c.inters.Attempt, interceptors...)
}

// Create returns a builder for creating a Attempt entity.
func (c *AttemptClient) Create() *AttemptCreate {
	mutation := newAttemptMutation(c.config, OpCreate)
	return &AttemptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attempt entities.
func (c *AttemptClient) CreateBulk(builders ...*AttemptCreate) *AttemptCreateBulk {
	return &AttemptCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttemptClient) MapCreateBulk(slice any, setFunc func(*AttemptCreate, int)) *AttemptCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttemptCreateBulk{err: fmt.Errorf("calling to AttemptClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttemptCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttemptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attempt.
func (c *AttemptClient) Update() *AttemptUpdate {
	mutation := newAttemptMutation(c.config, OpUpdate)
	return &AttemptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttemptClient) UpdateOne(_m *Attempt) *AttemptUpdateOne {
	mutation := newAttemptMutation(c.config, OpUpdateOne, withAttempt(_m))
	return &AttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttemptClient) UpdateOneID(id uuid.UUID) *AttemptUpdateOne {
	mutation := newAttemptMutation(c.config, OpUpdateOne, withAttemptID(id))
	return &AttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attempt.
func (c *AttemptClient) Delete() *AttemptDelete {
	mutation := newAttemptMutation(c.config, OpDelete)
	return &AttemptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttemptClient) DeleteOne(_m *Attempt) *AttemptDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttemptClient) DeleteOneID(id uuid.UUID) *AttemptDeleteOne {
	builder := c.Delete().Where(attempt.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttemptDeleteOne{builder}
}

// Query returns a query builder for Attempt.
func (c *AttemptClient) Query() *AttemptQuery {
	return &AttemptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttempt},
		inters: c.Interceptors(),
	}
}

// Get returns a Attempt entity by its id.
func (c *AttemptClient) Get(ctx context.Context, id uuid.UUID) (*Attempt, error) {
	return c.Query().Where(attempt.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttemptClient) GetX(ctx context.Context, id uuid.UUID) *Attempt {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AttemptClient) Hooks() []Hook {
	return c.hooks.Attempt
}

// Interceptors returns the client interceptors.
func (c *AttemptClient) Interceptors() []Interceptor {
	return c.inters.Attempt
}

func (c *AttemptClient) mutate(ctx context.Context, m *AttemptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttemptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttemptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttemptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Attempt mutation op: %q", m.Op())
	}
}

// BenefitClient is a client for the Benefit schema.
type BenefitClient struct {
	config
}

// NewBenefitClient returns a client for the Benefit from the given config.
func NewBenefitClient(c config) *BenefitClient {
	return &BenefitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `benefit.Hooks(f(g(h())))`.
func (c *BenefitClient) Use(hooks ...Hook) {
	c.hooks.Benefit = append(c.hooks.Benefit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `benefit.Intercept(f(g(h())))`.
func (c *BenefitClient) Intercept(interceptors ...Interceptor) {
	c.inters.Benefit = append(c.inters.Benefit, interceptors...)
}

// Create returns a builder for creating a Benefit entity.
func (c *BenefitClient) Create() *BenefitCreate {
	mutation := newBenefitMutation(c.config, OpCreate)
	return &BenefitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Benefit entities.
func (c *BenefitClient) CreateBulk(builders ...*BenefitCreate) *BenefitCreateBulk {
	return &BenefitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BenefitClient) MapCreateBulk(slice any, setFunc func(*BenefitCreate, int)) *BenefitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BenefitCreateBulk{err: fmt.Errorf("calling to BenefitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BenefitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BenefitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Benefit.
func (c *BenefitClient) Update() *BenefitUpdate {
	mutation := newBenefitMutation(c.config, OpUpdate)
	return &BenefitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BenefitClient) UpdateOne(_m *Benefit) *BenefitUpdateOne {
	mutation := newBenefitMutation(c.config, OpUpdateOne, withBenefit(_m))
	return &BenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BenefitClient) UpdateOneID(id int) *BenefitUpdateOne {
	mutation := newBenefitMutation(c.config, OpUpdateOne, withBenefitID(id))
	return &BenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Benefit.
func (c *BenefitClient) Delete() *BenefitDelete {
	mutation := newBenefitMutation(c.config, OpDelete)
	return &BenefitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BenefitClient) DeleteOne(_m *Benefit) *BenefitDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BenefitClient) DeleteOneID(id int) *BenefitDeleteOne {
	builder := c.Delete().Where(benefit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BenefitDeleteOne{builder}
}

// Query returns a query builder for Benefit.
func (c *BenefitClient) Query() *BenefitQuery {
	return &BenefitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBenefit},
		inters: c.Interceptors(),
	}
}

// Get returns a Benefit entity by its id.
func (c *BenefitClient) Get(ctx context.Context, id int) (*Benefit, error) {
	return c.Query().Where(benefit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BenefitClient) GetX(ctx context.Context, id int) *Benefit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBenefitFilters queries the benefit_filters edge of a Benefit.
func (c *BenefitClient) QueryBenefitFilters(_m *Benefit) *BenefitFilterQuery {
	query := (&BenefitFilterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(benefit.Table, benefit.FieldID, id),
			sqlgraph.To(benefitfilter.Table, benefitfilter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, benefit.BenefitFiltersTable, benefit.BenefitFiltersColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BenefitClient) Hooks() []Hook {
	return c.hooks.Benefit
}

// Interceptors returns the client interceptors.
func (c *BenefitClient) Interceptors() []Interceptor {
	return c.inters.Benefit
}

func (c *BenefitClient) mutate(ctx context.Context, m *BenefitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BenefitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BenefitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BenefitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BenefitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Benefit mutation op: %q", m.Op())
	}
}

// BenefitFilterClient is a client for the BenefitFilter schema.
type BenefitFilterClient struct {
	config
}

// NewBenefitFilterClient returns a client for the BenefitFilter from the given config.
func NewBenefitFilterClient(c config) *BenefitFilterClient {
	return &BenefitFilterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `benefitfilter.Hooks(f(g(h())))`.
func (c *BenefitFilterClient) Use(hooks ...Hook) {
	c.hooks.BenefitFilter = append(c.hooks.BenefitFilter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `benefitfilter.Intercept(f(g(h())))`.
func (c *BenefitFilterClient) Intercept(interceptors ...Interceptor) {
	c.inters.BenefitFilter = append(c.inters.BenefitFilter, interceptors...)
}

// Create returns a builder for creating a BenefitFilter entity.
func (c *BenefitFilterClient) Create() *BenefitFilterCreate {
	mutation := newBenefitFilterMutation(c.config, OpCreate)
	return &BenefitFilterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BenefitFilter entities.
func (c *BenefitFilterClient) CreateBulk(builders ...*BenefitFilterCreate) *BenefitFilterCreateBulk {
	return &BenefitFilterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BenefitFilterClient) MapCreateBulk(slice any, setFunc func(*BenefitFilterCreate, int)) *BenefitFilterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BenefitFilterCreateBulk{err: fmt.Errorf("calling to BenefitFilterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BenefitFilterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BenefitFilterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BenefitFilter.
func (c *BenefitFilterClient) Update() *BenefitFilterUpdate {
	mutation := newBenefitFilterMutation(c.config, OpUpdate)
	return &BenefitFilterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BenefitFilterClient) UpdateOne(_m *BenefitFilter) *BenefitFilterUpdateOne {
	mutation := newBenefitFilterMutation(c.config, OpUpdateOne, withBenefitFilter(_m))
	return &BenefitFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BenefitFilterClient) UpdateOneID(id int) *BenefitFilterUpdateOne {
	mutation := newBenefitFilterMutation(c.config, OpUpdateOne, withBenefitFilterID(id))
	return &BenefitFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BenefitFilter.
func (c *BenefitFilterClient) Delete() *BenefitFilterDelete {
	mutation := newBenefitFilterMutation(c.config, OpDelete)
	return &BenefitFilterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BenefitFilterClient) DeleteOne(_m *BenefitFilter) *BenefitFilterDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BenefitFilterClient) DeleteOneID(id int) *BenefitFilterDeleteOne {
	builder := c.Delete().Where(benefitfilter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BenefitFilterDeleteOne{builder}
}

// Query returns a query builder for BenefitFilter.
func (c *BenefitFilterClient) Query() *BenefitFilterQuery {
	return &BenefitFilterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBenefitFilter},
		inters: c.Interceptors(),
	}
}

// Get returns a BenefitFilter entity by its id.
func (c *BenefitFilterClient) Get(ctx context.Context, id int) (*BenefitFilter, error) {
	return c.Query().Where(benefitfilter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BenefitFilterClient) GetX(ctx context.Context, id int) *BenefitFilter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBenefit queries the benefit edge of a BenefitFilter.
func (c *BenefitFilterClient) QueryBenefit(_m *BenefitFilter) *BenefitQuery {
	query := (&BenefitClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(benefitfilter.Table, benefitfilter.FieldID, id),
			sqlgraph.To(benefit.Table, benefit.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, benefitfilter.BenefitTable, benefitfilter.BenefitColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFilter queries the filter edge of a BenefitFilter.
func (c *BenefitFilterClient) QueryFilter(_m *BenefitFilter) *FilterQuery {
	query := (&FilterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(benefitfilter.Table, benefitfilter.FieldID, id),
			sqlgraph.To(filter.Table, filter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, benefitfilter.FilterTable, benefitfilter.FilterColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BenefitFilterClient) Hooks() []Hook {
	return c.hooks.BenefitFilter
}

// Interceptors returns the client interceptors.
func (c *BenefitFilterClient) Interceptors() []Interceptor {
	return c.inters.BenefitFilter
}

func (c *BenefitFilterClient) mutate(ctx context.Context, m *BenefitFilterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BenefitFilterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BenefitFilterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BenefitFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BenefitFilterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BenefitFilter mutation op: %q", m.Op())
	}
}

// FilterClient is a client for the Filter schema.
type FilterClient struct {
	config
}

// NewFilterClient returns a client for the Filter from the given config.
func NewFilterClient(c config) *FilterClient {
	return &FilterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `filter.Hooks(f(g(h())))`.
func (c *FilterClient) Use(hooks ...Hook) {
	c.hooks.Filter = append(c.hooks.Filter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `filter.Intercept(f(g(h())))`.
func (c *FilterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Filter = append(c.inters.Filter, interceptors...)
}

// Create returns a builder for creating a Filter entity.
func (c *FilterClient) Create() *FilterCreate {
	mutation := newFilterMutation(c.config, OpCreate)
	return &FilterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Filter entities.
func (c *FilterClient) CreateBulk(builders ...*FilterCreate) *FilterCreateBulk {
	return &FilterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FilterClient) MapCreateBulk(slice any, setFunc func(*FilterCreate, int)) *FilterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FilterCreateBulk{err: fmt.Errorf("calling to FilterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FilterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FilterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Filter.
func (c *FilterClient) Update() *FilterUpdate {
	mutation := newFilterMutation(c.config, OpUpdate)
	return &FilterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FilterClient) UpdateOne(_m *Filter) *FilterUpdateOne {
	mutation := newFilterMutation(c.config, OpUpdateOne, withFilter(_m))
	return &FilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FilterClient) UpdateOneID(id int) *FilterUpdateOne {
	mutation := newFilterMutation(c.config, OpUpdateOne, withFilterID(id))
	return &FilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Filter.
func (c *FilterClient) Delete() *FilterDelete {
	mutation := newFilterMutation(c.config, OpDelete)
	return &FilterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FilterClient) DeleteOne(_m *Filter) *FilterDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FilterClient) DeleteOneID(id int) *FilterDeleteOne {
	builder := c.Delete().Where(filter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FilterDeleteOne{builder}
}

// Query returns a query builder for Filter.
func (c *FilterClient) Query() *FilterQuery {
	return &FilterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFilter},
		inters: c.Interceptors(),
	}
}

// Get returns a Filter entity by its id.
func (c *FilterClient) Get(ctx context.Context, id int) (*Filter, error) {
	return c.Query().Where(filter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FilterClient) GetX(ctx context.Context, id int) *Filter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserFilters queries the user_filters edge of a Filter.
func (c *FilterClient) QueryUserFilters(_m *Filter) *UserFilterQuery {
	query := (&UserFilterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(filter.Table, filter.FieldID, id),
			sqlgraph.To(userfilter.Table, userfilter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, filter.UserFiltersTable, filter.UserFiltersColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBenefitFilters queries the benefit_filters edge of a Filter.
func (c *FilterClient) QueryBenefitFilters(_m *Filter) *BenefitFilterQuery {
	query := (&BenefitFilterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(filter.Table, filter.FieldID, id),
			sqlgraph.To(benefitfilter.Table, benefitfilter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, filter.BenefitFiltersTable, filter.BenefitFiltersColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FilterClient) Hooks() []Hook {
	return c.hooks.Filter
}

// Interceptors returns the client interceptors.
func (c *FilterClient) Interceptors() []Interceptor {
	return c.inters.Filter
}

func (c *FilterClient) mutate(ctx context.Context, m *FilterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FilterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FilterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FilterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Filter mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserFilters queries the user_filters edge of a User.
func (c *UserClient) QueryUserFilters(_m *User) *UserFilterQuery {
	query := (&UserFilterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userfilter.Table, userfilter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserFiltersTable, user.UserFiltersColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserFilterClient is a client for the UserFilter schema.
type UserFilterClient struct {
	config
}

// NewUserFilterClient returns a client for the UserFilter from the given config.
func NewUserFilterClient(c config) *UserFilterClient {
	return &UserFilterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userfilter.Hooks(f(g(h())))`.
func (c *UserFilterClient) Use(hooks ...Hook) {
	c.hooks.UserFilter = append(c.hooks.UserFilter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userfilter.Intercept(f(g(h())))`.
func (c *UserFilterClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserFilter = append(c.inters.UserFilter, interceptors...)
}

// Create returns a builder for creating a UserFilter entity.
func (c *UserFilterClient) Create() *UserFilterCreate {
	mutation := newUserFilterMutation(c.config, OpCreate)
	return &UserFilterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserFilter entities.
func (c *UserFilterClient) CreateBulk(builders ...*UserFilterCreate) *UserFilterCreateBulk {
	return &UserFilterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserFilterClient) MapCreateBulk(slice any, setFunc func(*UserFilterCreate, int)) *UserFilterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserFilterCreateBulk{err: fmt.Errorf("calling to UserFilterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserFilterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserFilterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserFilter.
func (c *UserFilterClient) Update() *UserFilterUpdate {
	mutation := newUserFilterMutation(c.config, OpUpdate)
	return &UserFilterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserFilterClient) UpdateOne(_m *UserFilter) *UserFilterUpdateOne {
	mutation := newUserFilterMutation(c.config, OpUpdateOne, withUserFilter(_m))
	return &UserFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserFilterClient) UpdateOneID(id int) *UserFilterUpdateOne {
	mutation := newUserFilterMutation(c.config, OpUpdateOne, withUserFilterID(id))
	return &UserFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserFilter.
func (c *UserFilterClient) Delete() *UserFilterDelete {
	mutation := newUserFilterMutation(c.config, OpDelete)
	return &UserFilterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserFilterClient) DeleteOne(_m *UserFilter) *UserFilterDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserFilterClient) DeleteOneID(id int) *UserFilterDeleteOne {
	builder := c.Delete().Where(userfilter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserFilterDeleteOne{builder}
}

// Query returns a query builder for UserFilter.
func (c *UserFilterClient) Query() *UserFilterQuery {
	return &UserFilterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserFilter},
		inters: c.Interceptors(),
	}
}

// Get returns a UserFilter entity by its id.
func (c *UserFilterClient) Get(ctx context.Context, id int) (*UserFilter, error) {
	return c.Query().Where(userfilter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserFilterClient) GetX(ctx context.Context, id int) *UserFilter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserFilter.
func (c *UserFilterClient) QueryUser(_m *UserFilter) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfilter.Table, userfilter.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userfilter.UserTable, userfilter.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFilter queries the filter edge of a UserFilter.
func (c *UserFilterClient) QueryFilter(_m *UserFilter) *FilterQuery {
	query := (&FilterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userfilter.Table, userfilter.FieldID, id),
			sqlgraph.To(filter.Table, filter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userfilter.FilterTable, userfilter.FilterColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserFilterClient) Hooks() []Hook {
	return c.hooks.UserFilter
}

// Interceptors returns the client interceptors.
func (c *UserFilterClient) Interceptors() []Interceptor {
	return c.inters.UserFilter
}

func (c *UserFilterClient) mutate(ctx context.Context, m *UserFilterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserFilterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserFilterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserFilterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserFilter mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Attempt, Benefit, BenefitFilter, Filter, User, UserFilter []ent.Hook
	}
	inters struct {
		Attempt, Benefit, BenefitFilter, Filter, User, UserFilter []ent.Interceptor
	}
)
