// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/citizenkz/core/ent/benefit"
	"github.com/citizenkz/core/ent/benefitcategory"
	"github.com/citizenkz/core/ent/category"
)

// BenefitCategoryCreate is the builder for creating a BenefitCategory entity.
type BenefitCategoryCreate struct {
	config
	mutation *BenefitCategoryMutation
	hooks    []Hook
}

// SetBenefitID sets the "benefit_id" field.
func (_c *BenefitCategoryCreate) SetBenefitID(v int) *BenefitCategoryCreate {
	_c.mutation.SetBenefitID(v)
	return _c
}

// SetCategoryID sets the "category_id" field.
func (_c *BenefitCategoryCreate) SetCategoryID(v int) *BenefitCategoryCreate {
	_c.mutation.SetCategoryID(v)
	return _c
}

// SetBenefit sets the "benefit" edge to the Benefit entity.
func (_c *BenefitCategoryCreate) SetBenefit(v *Benefit) *BenefitCategoryCreate {
	return _c.SetBenefitID(v.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (_c *BenefitCategoryCreate) SetCategory(v *Category) *BenefitCategoryCreate {
	return _c.SetCategoryID(v.ID)
}

// Mutation returns the BenefitCategoryMutation object of the builder.
func (_c *BenefitCategoryCreate) Mutation() *BenefitCategoryMutation {
	return _c.mutation
}

// Save creates the BenefitCategory in the database.
func (_c *BenefitCategoryCreate) Save(ctx context.Context) (*BenefitCategory, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BenefitCategoryCreate) SaveX(ctx context.Context) *BenefitCategory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BenefitCategoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BenefitCategoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BenefitCategoryCreate) check() error {
	if _, ok := _c.mutation.BenefitID(); !ok {
		return &ValidationError{Name: "benefit_id", err: errors.New(`ent: missing required field "BenefitCategory.benefit_id"`)}
	}
	if _, ok := _c.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "BenefitCategory.category_id"`)}
	}
	if len(_c.mutation.BenefitIDs()) == 0 {
		return &ValidationError{Name: "benefit", err: errors.New(`ent: missing required edge "BenefitCategory.benefit"`)}
	}
	if len(_c.mutation.CategoryIDs()) == 0 {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required edge "BenefitCategory.category"`)}
	}
	return nil
}

func (_c *BenefitCategoryCreate) sqlSave(ctx context.Context) (*BenefitCategory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BenefitCategoryCreate) createSpec() (*BenefitCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &BenefitCategory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(benefitcategory.Table, sqlgraph.NewFieldSpec(benefitcategory.FieldID, field.TypeInt))
	)
	if nodes := _c.mutation.BenefitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   benefitcategory.BenefitTable,
			Columns: []string{benefitcategory.BenefitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefit.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BenefitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   benefitcategory.CategoryTable,
			Columns: []string{benefitcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BenefitCategoryCreateBulk is the builder for creating many BenefitCategory entities in bulk.
type BenefitCategoryCreateBulk struct {
	config
	err      error
	builders []*BenefitCategoryCreate
}

// Save creates the BenefitCategory entities in the database.
func (_c *BenefitCategoryCreateBulk) Save(ctx context.Context) ([]*BenefitCategory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*BenefitCategory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BenefitCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BenefitCategoryCreateBulk) SaveX(ctx context.Context) []*BenefitCategory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BenefitCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BenefitCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
