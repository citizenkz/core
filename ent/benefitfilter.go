// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/citizenkz/core/ent/benefit"
	"github.com/citizenkz/core/ent/benefitfilter"
	"github.com/citizenkz/core/ent/filter"
)

// BenefitFilter is the model entity for the BenefitFilter schema.
type BenefitFilter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BenefitID holds the value of the "benefit_id" field.
	BenefitID int `json:"benefit_id,omitempty"`
	// FilterID holds the value of the "filter_id" field.
	FilterID int `json:"filter_id,omitempty"`
	// Value holds the value of the "value" field.
	Value *string `json:"value,omitempty"`
	// From holds the value of the "from" field.
	From *string `json:"from,omitempty"`
	// To holds the value of the "to" field.
	To *string `json:"to,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BenefitFilterQuery when eager-loading is set.
	Edges        BenefitFilterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BenefitFilterEdges holds the relations/edges for other nodes in the graph.
type BenefitFilterEdges struct {
	// Benefit holds the value of the benefit edge.
	Benefit *Benefit `json:"benefit,omitempty"`
	// Filter holds the value of the filter edge.
	Filter *Filter `json:"filter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BenefitOrErr returns the Benefit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BenefitFilterEdges) BenefitOrErr() (*Benefit, error) {
	if e.Benefit != nil {
		return e.Benefit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: benefit.Label}
	}
	return nil, &NotLoadedError{edge: "benefit"}
}

// FilterOrErr returns the Filter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BenefitFilterEdges) FilterOrErr() (*Filter, error) {
	if e.Filter != nil {
		return e.Filter, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: filter.Label}
	}
	return nil, &NotLoadedError{edge: "filter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BenefitFilter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case benefitfilter.FieldID, benefitfilter.FieldBenefitID, benefitfilter.FieldFilterID:
			values[i] = new(sql.NullInt64)
		case benefitfilter.FieldValue, benefitfilter.FieldFrom, benefitfilter.FieldTo:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BenefitFilter fields.
func (_m *BenefitFilter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case benefitfilter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case benefitfilter.FieldBenefitID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_id", values[i])
			} else if value.Valid {
				_m.BenefitID = int(value.Int64)
			}
		case benefitfilter.FieldFilterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field filter_id", values[i])
			} else if value.Valid {
				_m.FilterID = int(value.Int64)
			}
		case benefitfilter.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				_m.Value = new(string)
				*_m.Value = value.String
			}
		case benefitfilter.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				_m.From = new(string)
				*_m.From = value.String
			}
		case benefitfilter.FieldTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value.Valid {
				_m.To = new(string)
				*_m.To = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the BenefitFilter.
// This includes values selected through modifiers, order, etc.
func (_m *BenefitFilter) GetValue(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBenefit queries the "benefit" edge of the BenefitFilter entity.
func (_m *BenefitFilter) QueryBenefit() *BenefitQuery {
	return NewBenefitFilterClient(_m.config).QueryBenefit(_m)
}

// QueryFilter queries the "filter" edge of the BenefitFilter entity.
func (_m *BenefitFilter) QueryFilter() *FilterQuery {
	return NewBenefitFilterClient(_m.config).QueryFilter(_m)
}

// Update returns a builder for updating this BenefitFilter.
// Note that you need to call BenefitFilter.Unwrap() before calling this method if this BenefitFilter
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BenefitFilter) Update() *BenefitFilterUpdateOne {
	return NewBenefitFilterClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BenefitFilter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BenefitFilter) Unwrap() *BenefitFilter {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BenefitFilter is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BenefitFilter) String() string {
	var builder strings.Builder
	builder.WriteString("BenefitFilter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("benefit_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.BenefitID))
	builder.WriteString(", ")
	builder.WriteString("filter_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.FilterID))
	builder.WriteString(", ")
	if v := _m.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.From; v != nil {
		builder.WriteString("from=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.To; v != nil {
		builder.WriteString("to=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BenefitFilters is a parsable slice of BenefitFilter.
type BenefitFilters []*BenefitFilter
