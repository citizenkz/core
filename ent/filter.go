// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/citizenkz/core/ent/filter"
)

// Filter is the model entity for the Filter schema.
type Filter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Hint holds the value of the "hint" field.
	Hint *string `json:"hint,omitempty"`
	// Type holds the value of the "type" field.
	Type filter.Type `json:"type,omitempty"`
	// Values holds the value of the "values" field.
	Values []string `json:"values,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FilterQuery when eager-loading is set.
	Edges        FilterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FilterEdges holds the relations/edges for other nodes in the graph.
type FilterEdges struct {
	// UserFilters holds the value of the user_filters edge.
	UserFilters []*UserFilter `json:"user_filters,omitempty"`
	// BenefitFilters holds the value of the benefit_filters edge.
	BenefitFilters []*BenefitFilter `json:"benefit_filters,omitempty"`
	// ChildFilters holds the value of the child_filters edge.
	ChildFilters []*ChildFilter `json:"child_filters,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserFiltersOrErr returns the UserFilters value or an error if the edge
// was not loaded in eager-loading.
func (e FilterEdges) UserFiltersOrErr() ([]*UserFilter, error) {
	if e.loadedTypes[0] {
		return e.UserFilters, nil
	}
	return nil, &NotLoadedError{edge: "user_filters"}
}

// BenefitFiltersOrErr returns the BenefitFilters value or an error if the edge
// was not loaded in eager-loading.
func (e FilterEdges) BenefitFiltersOrErr() ([]*BenefitFilter, error) {
	if e.loadedTypes[1] {
		return e.BenefitFilters, nil
	}
	return nil, &NotLoadedError{edge: "benefit_filters"}
}

// ChildFiltersOrErr returns the ChildFilters value or an error if the edge
// was not loaded in eager-loading.
func (e FilterEdges) ChildFiltersOrErr() ([]*ChildFilter, error) {
	if e.loadedTypes[2] {
		return e.ChildFilters, nil
	}
	return nil, &NotLoadedError{edge: "child_filters"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Filter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filter.FieldValues:
			values[i] = new([]byte)
		case filter.FieldID:
			values[i] = new(sql.NullInt64)
		case filter.FieldName, filter.FieldHint, filter.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Filter fields.
func (_m *Filter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case filter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case filter.FieldHint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hint", values[i])
			} else if value.Valid {
				_m.Hint = new(string)
				*_m.Hint = value.String
			}
		case filter.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = filter.Type(value.String)
			}
		case filter.FieldValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Values); err != nil {
					return fmt.Errorf("unmarshal field values: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Filter.
// This includes values selected through modifiers, order, etc.
func (_m *Filter) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUserFilters queries the "user_filters" edge of the Filter entity.
func (_m *Filter) QueryUserFilters() *UserFilterQuery {
	return NewFilterClient(_m.config).QueryUserFilters(_m)
}

// QueryBenefitFilters queries the "benefit_filters" edge of the Filter entity.
func (_m *Filter) QueryBenefitFilters() *BenefitFilterQuery {
	return NewFilterClient(_m.config).QueryBenefitFilters(_m)
}

// QueryChildFilters queries the "child_filters" edge of the Filter entity.
func (_m *Filter) QueryChildFilters() *ChildFilterQuery {
	return NewFilterClient(_m.config).QueryChildFilters(_m)
}

// Update returns a builder for updating this Filter.
// Note that you need to call Filter.Unwrap() before calling this method if this Filter
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Filter) Update() *FilterUpdateOne {
	return NewFilterClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Filter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Filter) Unwrap() *Filter {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Filter is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Filter) String() string {
	var builder strings.Builder
	builder.WriteString("Filter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Hint; v != nil {
		builder.WriteString("hint=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("values=")
	builder.WriteString(fmt.Sprintf("%v", _m.Values))
	builder.WriteByte(')')
	return builder.String()
}

// Filters is a parsable slice of Filter.
type Filters []*Filter
