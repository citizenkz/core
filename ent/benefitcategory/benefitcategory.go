// Code generated by ent, DO NOT EDIT.

package benefitcategory

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the benefitcategory type in the database.
	Label = "benefit_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBenefitID holds the string denoting the benefit_id field in the database.
	FieldBenefitID = "benefit_id"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// EdgeBenefit holds the string denoting the benefit edge name in mutations.
	EdgeBenefit = "benefit"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// Table holds the table name of the benefitcategory in the database.
	Table = "benefit_categories"
	// BenefitTable is the table that holds the benefit relation/edge.
	BenefitTable = "benefit_categories"
	// BenefitInverseTable is the table name for the Benefit entity.
	// It exists in this package in order to avoid circular dependency with the "benefit" package.
	BenefitInverseTable = "benefits"
	// BenefitColumn is the table column denoting the benefit relation/edge.
	BenefitColumn = "benefit_id"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "benefit_categories"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "category_id"
)

// Columns holds all SQL columns for benefitcategory fields.
var Columns = []string{
	FieldID,
	FieldBenefitID,
	FieldCategoryID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the BenefitCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBenefitID orders the results by the benefit_id field.
func ByBenefitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBenefitID, opts...).ToFunc()
}

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// ByBenefitField orders the results by benefit field.
func ByBenefitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBenefitStep(), sql.OrderByField(field, opts...))
	}
}

// ByCategoryField orders the results by category field.
func ByCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), sql.OrderByField(field, opts...))
	}
}
func newBenefitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BenefitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BenefitTable, BenefitColumn),
	)
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
	)
}
