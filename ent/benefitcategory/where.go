// Code generated by ent, DO NOT EDIT.

package benefitcategory

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/citizenkz/core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldLTE(FieldID, id))
}

// BenefitID applies equality check predicate on the "benefit_id" field. It's identical to BenefitIDEQ.
func BenefitID(v int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldEQ(FieldBenefitID, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldEQ(FieldCategoryID, v))
}

// BenefitIDEQ applies the EQ predicate on the "benefit_id" field.
func BenefitIDEQ(v int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldEQ(FieldBenefitID, v))
}

// BenefitIDNEQ applies the NEQ predicate on the "benefit_id" field.
func BenefitIDNEQ(v int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldNEQ(FieldBenefitID, v))
}

// BenefitIDIn applies the In predicate on the "benefit_id" field.
func BenefitIDIn(vs ...int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldIn(FieldBenefitID, vs...))
}

// BenefitIDNotIn applies the NotIn predicate on the "benefit_id" field.
func BenefitIDNotIn(vs ...int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldNotIn(FieldBenefitID, vs...))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.FieldNotIn(FieldCategoryID, vs...))
}

// HasBenefit applies the HasEdge predicate on the "benefit" edge.
func HasBenefit() predicate.BenefitCategory {
	return predicate.BenefitCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BenefitTable, BenefitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBenefitWith applies the HasEdge predicate on the "benefit" edge with a given conditions (other predicates).
func HasBenefitWith(preds ...predicate.Benefit) predicate.BenefitCategory {
	return predicate.BenefitCategory(func(s *sql.Selector) {
		step := newBenefitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategory applies the HasEdge predicate on the "category" edge.
func HasCategory() predicate.BenefitCategory {
	return predicate.BenefitCategory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.Category) predicate.BenefitCategory {
	return predicate.BenefitCategory(func(s *sql.Selector) {
		step := newCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BenefitCategory) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BenefitCategory) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BenefitCategory) predicate.BenefitCategory {
	return predicate.BenefitCategory(sql.NotPredicates(p))
}
