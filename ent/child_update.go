// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/citizenkz/core/ent/child"
	"github.com/citizenkz/core/ent/childfilter"
	"github.com/citizenkz/core/ent/predicate"
	"github.com/citizenkz/core/ent/user"
)

// ChildUpdate is the builder for updating Child entities.
type ChildUpdate struct {
	config
	hooks    []Hook
	mutation *ChildMutation
}

// Where appends a list predicates to the ChildUpdate builder.
func (_u *ChildUpdate) Where(ps ...predicate.Child) *ChildUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *ChildUpdate) SetFirstName(v string) *ChildUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *ChildUpdate) SetNillableFirstName(v *string) *ChildUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *ChildUpdate) SetLastName(v string) *ChildUpdate {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *ChildUpdate) SetNillableLastName(v *string) *ChildUpdate {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// SetBirthDate sets the "birth_date" field.
func (_u *ChildUpdate) SetBirthDate(v time.Time) *ChildUpdate {
	_u.mutation.SetBirthDate(v)
	return _u
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (_u *ChildUpdate) SetNillableBirthDate(v *time.Time) *ChildUpdate {
	if v != nil {
		_u.SetBirthDate(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ChildUpdate) SetUserID(v int) *ChildUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ChildUpdate) SetNillableUserID(v *int) *ChildUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ChildUpdate) SetUser(v *User) *ChildUpdate {
	return _u.SetUserID(v.ID)
}

// AddChildFilterIDs adds the "child_filters" edge to the ChildFilter entity by IDs.
func (_u *ChildUpdate) AddChildFilterIDs(ids ...int) *ChildUpdate {
	_u.mutation.AddChildFilterIDs(ids...)
	return _u
}

// AddChildFilters adds the "child_filters" edges to the ChildFilter entity.
func (_u *ChildUpdate) AddChildFilters(v ...*ChildFilter) *ChildUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildFilterIDs(ids...)
}

// Mutation returns the ChildMutation object of the builder.
func (_u *ChildUpdate) Mutation() *ChildMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ChildUpdate) ClearUser() *ChildUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearChildFilters clears all "child_filters" edges to the ChildFilter entity.
func (_u *ChildUpdate) ClearChildFilters() *ChildUpdate {
	_u.mutation.ClearChildFilters()
	return _u
}

// RemoveChildFilterIDs removes the "child_filters" edge to ChildFilter entities by IDs.
func (_u *ChildUpdate) RemoveChildFilterIDs(ids ...int) *ChildUpdate {
	_u.mutation.RemoveChildFilterIDs(ids...)
	return _u
}

// RemoveChildFilters removes "child_filters" edges to ChildFilter entities.
func (_u *ChildUpdate) RemoveChildFilters(v ...*ChildFilter) *ChildUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildFilterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChildUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChildUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChildUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChildUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChildUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Child.user"`)
	}
	return nil
}

func (_u *ChildUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(child.Table, child.Columns, sqlgraph.NewFieldSpec(child.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(child.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(child.FieldLastName, field.TypeString, value)
	}
	if value, ok := _u.mutation.BirthDate(); ok {
		_spec.SetField(child.FieldBirthDate, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   child.UserTable,
			Columns: []string{child.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   child.UserTable,
			Columns: []string{child.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   child.ChildFiltersTable,
			Columns: []string{child.ChildFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childfilter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildFiltersIDs(); len(nodes) > 0 && !_u.mutation.ChildFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   child.ChildFiltersTable,
			Columns: []string{child.ChildFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   child.ChildFiltersTable,
			Columns: []string{child.ChildFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{child.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChildUpdateOne is the builder for updating a single Child entity.
type ChildUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChildMutation
}

// SetFirstName sets the "first_name" field.
func (_u *ChildUpdateOne) SetFirstName(v string) *ChildUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *ChildUpdateOne) SetNillableFirstName(v *string) *ChildUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *ChildUpdateOne) SetLastName(v string) *ChildUpdateOne {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *ChildUpdateOne) SetNillableLastName(v *string) *ChildUpdateOne {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// SetBirthDate sets the "birth_date" field.
func (_u *ChildUpdateOne) SetBirthDate(v time.Time) *ChildUpdateOne {
	_u.mutation.SetBirthDate(v)
	return _u
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (_u *ChildUpdateOne) SetNillableBirthDate(v *time.Time) *ChildUpdateOne {
	if v != nil {
		_u.SetBirthDate(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ChildUpdateOne) SetUserID(v int) *ChildUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ChildUpdateOne) SetNillableUserID(v *int) *ChildUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ChildUpdateOne) SetUser(v *User) *ChildUpdateOne {
	return _u.SetUserID(v.ID)
}

// AddChildFilterIDs adds the "child_filters" edge to the ChildFilter entity by IDs.
func (_u *ChildUpdateOne) AddChildFilterIDs(ids ...int) *ChildUpdateOne {
	_u.mutation.AddChildFilterIDs(ids...)
	return _u
}

// AddChildFilters adds the "child_filters" edges to the ChildFilter entity.
func (_u *ChildUpdateOne) AddChildFilters(v ...*ChildFilter) *ChildUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildFilterIDs(ids...)
}

// Mutation returns the ChildMutation object of the builder.
func (_u *ChildUpdateOne) Mutation() *ChildMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ChildUpdateOne) ClearUser() *ChildUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearChildFilters clears all "child_filters" edges to the ChildFilter entity.
func (_u *ChildUpdateOne) ClearChildFilters() *ChildUpdateOne {
	_u.mutation.ClearChildFilters()
	return _u
}

// RemoveChildFilterIDs removes the "child_filters" edge to ChildFilter entities by IDs.
func (_u *ChildUpdateOne) RemoveChildFilterIDs(ids ...int) *ChildUpdateOne {
	_u.mutation.RemoveChildFilterIDs(ids...)
	return _u
}

// RemoveChildFilters removes "child_filters" edges to ChildFilter entities.
func (_u *ChildUpdateOne) RemoveChildFilters(v ...*ChildFilter) *ChildUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildFilterIDs(ids...)
}

// Where appends a list predicates to the ChildUpdate builder.
func (_u *ChildUpdateOne) Where(ps ...predicate.Child) *ChildUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChildUpdateOne) Select(field string, fields ...string) *ChildUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Child entity.
func (_u *ChildUpdateOne) Save(ctx context.Context) (*Child, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChildUpdateOne) SaveX(ctx context.Context) *Child {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChildUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChildUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChildUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Child.user"`)
	}
	return nil
}

func (_u *ChildUpdateOne) sqlSave(ctx context.Context) (_node *Child, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(child.Table, child.Columns, sqlgraph.NewFieldSpec(child.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Child.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, child.FieldID)
		for _, f := range fields {
			if !child.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != child.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(child.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(child.FieldLastName, field.TypeString, value)
	}
	if value, ok := _u.mutation.BirthDate(); ok {
		_spec.SetField(child.FieldBirthDate, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   child.UserTable,
			Columns: []string{child.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   child.UserTable,
			Columns: []string{child.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   child.ChildFiltersTable,
			Columns: []string{child.ChildFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childfilter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildFiltersIDs(); len(nodes) > 0 && !_u.mutation.ChildFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   child.ChildFiltersTable,
			Columns: []string{child.ChildFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   child.ChildFiltersTable,
			Columns: []string{child.ChildFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(childfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Child{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{child.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
