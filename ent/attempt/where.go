// Code generated by ent, DO NOT EDIT.

package attempt

import (
	"entgo.io/ent/dialect/sql"
	"github.com/citizenkz/core/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Attempt {
	return predicate.Attempt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Attempt {
	return predicate.Attempt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Attempt {
	return predicate.Attempt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Attempt {
	return predicate.Attempt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Attempt {
	return predicate.Attempt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Attempt {
	return predicate.Attempt(sql.FieldLTE(FieldID, id))
}

// Otp applies equality check predicate on the "otp" field. It's identical to OtpEQ.
func Otp(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldOtp, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldEmail, v))
}

// OtpEQ applies the EQ predicate on the "otp" field.
func OtpEQ(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldOtp, v))
}

// OtpNEQ applies the NEQ predicate on the "otp" field.
func OtpNEQ(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldOtp, v))
}

// OtpIn applies the In predicate on the "otp" field.
func OtpIn(vs ...string) predicate.Attempt {
	return predicate.Attempt(sql.FieldIn(FieldOtp, vs...))
}

// OtpNotIn applies the NotIn predicate on the "otp" field.
func OtpNotIn(vs ...string) predicate.Attempt {
	return predicate.Attempt(sql.FieldNotIn(FieldOtp, vs...))
}

// OtpGT applies the GT predicate on the "otp" field.
func OtpGT(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldGT(FieldOtp, v))
}

// OtpGTE applies the GTE predicate on the "otp" field.
func OtpGTE(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldGTE(FieldOtp, v))
}

// OtpLT applies the LT predicate on the "otp" field.
func OtpLT(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldLT(FieldOtp, v))
}

// OtpLTE applies the LTE predicate on the "otp" field.
func OtpLTE(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldLTE(FieldOtp, v))
}

// OtpContains applies the Contains predicate on the "otp" field.
func OtpContains(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldContains(FieldOtp, v))
}

// OtpHasPrefix applies the HasPrefix predicate on the "otp" field.
func OtpHasPrefix(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldHasPrefix(FieldOtp, v))
}

// OtpHasSuffix applies the HasSuffix predicate on the "otp" field.
func OtpHasSuffix(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldHasSuffix(FieldOtp, v))
}

// OtpEqualFold applies the EqualFold predicate on the "otp" field.
func OtpEqualFold(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldEqualFold(FieldOtp, v))
}

// OtpContainsFold applies the ContainsFold predicate on the "otp" field.
func OtpContainsFold(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldContainsFold(FieldOtp, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Attempt {
	return predicate.Attempt(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Attempt {
	return predicate.Attempt(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Attempt {
	return predicate.Attempt(sql.FieldContainsFold(FieldEmail, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Attempt) predicate.Attempt {
	return predicate.Attempt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Attempt) predicate.Attempt {
	return predicate.Attempt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Attempt) predicate.Attempt {
	return predicate.Attempt(sql.NotPredicates(p))
}
