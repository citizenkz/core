// Code generated by ent, DO NOT EDIT.

package attempt

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the attempt type in the database.
	Label = "attempt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOtp holds the string denoting the otp field in the database.
	FieldOtp = "otp"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// EdgeAttempts holds the string denoting the attempts edge name in mutations.
	EdgeAttempts = "attempts"
	// Table holds the table name of the attempt in the database.
	Table = "attempts"
	// AttemptsTable is the table that holds the attempts relation/edge. The primary key declared below.
	AttemptsTable = "attempt_attempts"
)

// Columns holds all SQL columns for attempt fields.
var Columns = []string{
	FieldID,
	FieldOtp,
	FieldEmail,
}

var (
	// AttemptsPrimaryKey and AttemptsColumn2 are the table columns denoting the
	// primary key for the attempts relation (M2M).
	AttemptsPrimaryKey = []string{"attempt_id", "attempt_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// OtpValidator is a validator for the "otp" field. It is called by the builders before save.
	OtpValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Attempt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOtp orders the results by the otp field.
func ByOtp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOtp, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByAttemptsCount orders the results by attempts count.
func ByAttemptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttemptsStep(), opts...)
	}
}

// ByAttempts orders the results by attempts terms.
func ByAttempts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttemptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAttemptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AttemptsTable, AttemptsPrimaryKey...),
	)
}
