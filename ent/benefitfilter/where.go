// Code generated by ent, DO NOT EDIT.

package benefitfilter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/citizenkz/core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldLTE(FieldID, id))
}

// BenefitID applies equality check predicate on the "benefit_id" field. It's identical to BenefitIDEQ.
func BenefitID(v int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldBenefitID, v))
}

// FilterID applies equality check predicate on the "filter_id" field. It's identical to FilterIDEQ.
func FilterID(v int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldFilterID, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldValue, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldFrom, v))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldTo, v))
}

// BenefitIDEQ applies the EQ predicate on the "benefit_id" field.
func BenefitIDEQ(v int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldBenefitID, v))
}

// BenefitIDNEQ applies the NEQ predicate on the "benefit_id" field.
func BenefitIDNEQ(v int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNEQ(FieldBenefitID, v))
}

// BenefitIDIn applies the In predicate on the "benefit_id" field.
func BenefitIDIn(vs ...int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldIn(FieldBenefitID, vs...))
}

// BenefitIDNotIn applies the NotIn predicate on the "benefit_id" field.
func BenefitIDNotIn(vs ...int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNotIn(FieldBenefitID, vs...))
}

// FilterIDEQ applies the EQ predicate on the "filter_id" field.
func FilterIDEQ(v int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldFilterID, v))
}

// FilterIDNEQ applies the NEQ predicate on the "filter_id" field.
func FilterIDNEQ(v int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNEQ(FieldFilterID, v))
}

// FilterIDIn applies the In predicate on the "filter_id" field.
func FilterIDIn(vs ...int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldIn(FieldFilterID, vs...))
}

// FilterIDNotIn applies the NotIn predicate on the "filter_id" field.
func FilterIDNotIn(vs ...int) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNotIn(FieldFilterID, vs...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldHasSuffix(FieldValue, v))
}

// ValueIsNil applies the IsNil predicate on the "value" field.
func ValueIsNil() predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldIsNull(FieldValue))
}

// ValueNotNil applies the NotNil predicate on the "value" field.
func ValueNotNil() predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNotNull(FieldValue))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldContainsFold(FieldValue, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldHasSuffix(FieldFrom, v))
}

// FromIsNil applies the IsNil predicate on the "from" field.
func FromIsNil() predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldIsNull(FieldFrom))
}

// FromNotNil applies the NotNil predicate on the "from" field.
func FromNotNil() predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNotNull(FieldFrom))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldContainsFold(FieldFrom, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldLTE(FieldTo, v))
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldContains(FieldTo, v))
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldHasPrefix(FieldTo, v))
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldHasSuffix(FieldTo, v))
}

// ToIsNil applies the IsNil predicate on the "to" field.
func ToIsNil() predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldIsNull(FieldTo))
}

// ToNotNil applies the NotNil predicate on the "to" field.
func ToNotNil() predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldNotNull(FieldTo))
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldEqualFold(FieldTo, v))
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.FieldContainsFold(FieldTo, v))
}

// HasBenefit applies the HasEdge predicate on the "benefit" edge.
func HasBenefit() predicate.BenefitFilter {
	return predicate.BenefitFilter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BenefitTable, BenefitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBenefitWith applies the HasEdge predicate on the "benefit" edge with a given conditions (other predicates).
func HasBenefitWith(preds ...predicate.Benefit) predicate.BenefitFilter {
	return predicate.BenefitFilter(func(s *sql.Selector) {
		step := newBenefitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFilter applies the HasEdge predicate on the "filter" edge.
func HasFilter() predicate.BenefitFilter {
	return predicate.BenefitFilter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FilterTable, FilterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilterWith applies the HasEdge predicate on the "filter" edge with a given conditions (other predicates).
func HasFilterWith(preds ...predicate.Filter) predicate.BenefitFilter {
	return predicate.BenefitFilter(func(s *sql.Selector) {
		step := newFilterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BenefitFilter) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BenefitFilter) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BenefitFilter) predicate.BenefitFilter {
	return predicate.BenefitFilter(sql.NotPredicates(p))
}
