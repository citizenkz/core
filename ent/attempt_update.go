// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/citizenkz/core/ent/attempt"
	"github.com/citizenkz/core/ent/predicate"
)

// AttemptUpdate is the builder for updating Attempt entities.
type AttemptUpdate struct {
	config
	hooks    []Hook
	mutation *AttemptMutation
}

// Where appends a list predicates to the AttemptUpdate builder.
func (_u *AttemptUpdate) Where(ps ...predicate.Attempt) *AttemptUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOtp sets the "otp" field.
func (_u *AttemptUpdate) SetOtp(v string) *AttemptUpdate {
	_u.mutation.SetOtp(v)
	return _u
}

// SetNillableOtp sets the "otp" field if the given value is not nil.
func (_u *AttemptUpdate) SetNillableOtp(v *string) *AttemptUpdate {
	if v != nil {
		_u.SetOtp(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *AttemptUpdate) SetEmail(v string) *AttemptUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *AttemptUpdate) SetNillableEmail(v *string) *AttemptUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// Mutation returns the AttemptMutation object of the builder.
func (_u *AttemptUpdate) Mutation() *AttemptMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AttemptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AttemptUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AttemptUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AttemptUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AttemptUpdate) check() error {
	if v, ok := _u.mutation.Otp(); ok {
		if err := attempt.OtpValidator(v); err != nil {
			return &ValidationError{Name: "otp", err: fmt.Errorf(`ent: validator failed for field "Attempt.otp": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := attempt.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Attempt.email": %w`, err)}
		}
	}
	return nil
}

func (_u *AttemptUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attempt.Table, attempt.Columns, sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Otp(); ok {
		_spec.SetField(attempt.FieldOtp, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(attempt.FieldEmail, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AttemptUpdateOne is the builder for updating a single Attempt entity.
type AttemptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttemptMutation
}

// SetOtp sets the "otp" field.
func (_u *AttemptUpdateOne) SetOtp(v string) *AttemptUpdateOne {
	_u.mutation.SetOtp(v)
	return _u
}

// SetNillableOtp sets the "otp" field if the given value is not nil.
func (_u *AttemptUpdateOne) SetNillableOtp(v *string) *AttemptUpdateOne {
	if v != nil {
		_u.SetOtp(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *AttemptUpdateOne) SetEmail(v string) *AttemptUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *AttemptUpdateOne) SetNillableEmail(v *string) *AttemptUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// Mutation returns the AttemptMutation object of the builder.
func (_u *AttemptUpdateOne) Mutation() *AttemptMutation {
	return _u.mutation
}

// Where appends a list predicates to the AttemptUpdate builder.
func (_u *AttemptUpdateOne) Where(ps ...predicate.Attempt) *AttemptUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AttemptUpdateOne) Select(field string, fields ...string) *AttemptUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Attempt entity.
func (_u *AttemptUpdateOne) Save(ctx context.Context) (*Attempt, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AttemptUpdateOne) SaveX(ctx context.Context) *Attempt {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AttemptUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AttemptUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AttemptUpdateOne) check() error {
	if v, ok := _u.mutation.Otp(); ok {
		if err := attempt.OtpValidator(v); err != nil {
			return &ValidationError{Name: "otp", err: fmt.Errorf(`ent: validator failed for field "Attempt.otp": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := attempt.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Attempt.email": %w`, err)}
		}
	}
	return nil
}

func (_u *AttemptUpdateOne) sqlSave(ctx context.Context) (_node *Attempt, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attempt.Table, attempt.Columns, sqlgraph.NewFieldSpec(attempt.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attempt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attempt.FieldID)
		for _, f := range fields {
			if !attempt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attempt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Otp(); ok {
		_spec.SetField(attempt.FieldOtp, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(attempt.FieldEmail, field.TypeString, value)
	}
	_node = &Attempt{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
