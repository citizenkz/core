// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/citizenkz/core/ent/benefit"
	"github.com/citizenkz/core/ent/benefitcategory"
	"github.com/citizenkz/core/ent/category"
)

// BenefitCategory is the model entity for the BenefitCategory schema.
type BenefitCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BenefitID holds the value of the "benefit_id" field.
	BenefitID int `json:"benefit_id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID int `json:"category_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BenefitCategoryQuery when eager-loading is set.
	Edges        BenefitCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BenefitCategoryEdges holds the relations/edges for other nodes in the graph.
type BenefitCategoryEdges struct {
	// Benefit holds the value of the benefit edge.
	Benefit *Benefit `json:"benefit,omitempty"`
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BenefitOrErr returns the Benefit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BenefitCategoryEdges) BenefitOrErr() (*Benefit, error) {
	if e.Benefit != nil {
		return e.Benefit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: benefit.Label}
	}
	return nil, &NotLoadedError{edge: "benefit"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BenefitCategoryEdges) CategoryOrErr() (*Category, error) {
	if e.Category != nil {
		return e.Category, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: category.Label}
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BenefitCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case benefitcategory.FieldID, benefitcategory.FieldBenefitID, benefitcategory.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BenefitCategory fields.
func (_m *BenefitCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case benefitcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case benefitcategory.FieldBenefitID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_id", values[i])
			} else if value.Valid {
				_m.BenefitID = int(value.Int64)
			}
		case benefitcategory.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				_m.CategoryID = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BenefitCategory.
// This includes values selected through modifiers, order, etc.
func (_m *BenefitCategory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryBenefit queries the "benefit" edge of the BenefitCategory entity.
func (_m *BenefitCategory) QueryBenefit() *BenefitQuery {
	return NewBenefitCategoryClient(_m.config).QueryBenefit(_m)
}

// QueryCategory queries the "category" edge of the BenefitCategory entity.
func (_m *BenefitCategory) QueryCategory() *CategoryQuery {
	return NewBenefitCategoryClient(_m.config).QueryCategory(_m)
}

// Update returns a builder for updating this BenefitCategory.
// Note that you need to call BenefitCategory.Unwrap() before calling this method if this BenefitCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *BenefitCategory) Update() *BenefitCategoryUpdateOne {
	return NewBenefitCategoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the BenefitCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *BenefitCategory) Unwrap() *BenefitCategory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: BenefitCategory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *BenefitCategory) String() string {
	var builder strings.Builder
	builder.WriteString("BenefitCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("benefit_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.BenefitID))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.CategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// BenefitCategories is a parsable slice of BenefitCategory.
type BenefitCategories []*BenefitCategory
