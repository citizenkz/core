// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/citizenkz/core/ent/attempt"
	"github.com/google/uuid"
)

// Attempt is the model entity for the Attempt schema.
type Attempt struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Otp holds the value of the "otp" field.
	Otp string `json:"otp,omitempty"`
	// Email holds the value of the "email" field.
	Email        string `json:"email,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attempt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attempt.FieldOtp, attempt.FieldEmail:
			values[i] = new(sql.NullString)
		case attempt.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attempt fields.
func (_m *Attempt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attempt.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case attempt.FieldOtp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field otp", values[i])
			} else if value.Valid {
				_m.Otp = value.String
			}
		case attempt.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Attempt.
// This includes values selected through modifiers, order, etc.
func (_m *Attempt) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Attempt.
// Note that you need to call Attempt.Unwrap() before calling this method if this Attempt
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Attempt) Update() *AttemptUpdateOne {
	return NewAttemptClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Attempt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Attempt) Unwrap() *Attempt {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attempt is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Attempt) String() string {
	var builder strings.Builder
	builder.WriteString("Attempt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("otp=")
	builder.WriteString(_m.Otp)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteByte(')')
	return builder.String()
}

// Attempts is a parsable slice of Attempt.
type Attempts []*Attempt
