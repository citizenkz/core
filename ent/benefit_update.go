// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/citizenkz/core/ent/benefit"
	"github.com/citizenkz/core/ent/benefitcategory"
	"github.com/citizenkz/core/ent/benefitfilter"
	"github.com/citizenkz/core/ent/predicate"
)

// BenefitUpdate is the builder for updating Benefit entities.
type BenefitUpdate struct {
	config
	hooks    []Hook
	mutation *BenefitMutation
}

// Where appends a list predicates to the BenefitUpdate builder.
func (_u *BenefitUpdate) Where(ps ...predicate.Benefit) *BenefitUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *BenefitUpdate) SetTitle(v string) *BenefitUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *BenefitUpdate) SetNillableTitle(v *string) *BenefitUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *BenefitUpdate) SetContent(v string) *BenefitUpdate {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *BenefitUpdate) SetNillableContent(v *string) *BenefitUpdate {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetBonus sets the "bonus" field.
func (_u *BenefitUpdate) SetBonus(v string) *BenefitUpdate {
	_u.mutation.SetBonus(v)
	return _u
}

// SetNillableBonus sets the "bonus" field if the given value is not nil.
func (_u *BenefitUpdate) SetNillableBonus(v *string) *BenefitUpdate {
	if v != nil {
		_u.SetBonus(*v)
	}
	return _u
}

// SetVideoURL sets the "video_url" field.
func (_u *BenefitUpdate) SetVideoURL(v string) *BenefitUpdate {
	_u.mutation.SetVideoURL(v)
	return _u
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (_u *BenefitUpdate) SetNillableVideoURL(v *string) *BenefitUpdate {
	if v != nil {
		_u.SetVideoURL(*v)
	}
	return _u
}

// ClearVideoURL clears the value of the "video_url" field.
func (_u *BenefitUpdate) ClearVideoURL() *BenefitUpdate {
	_u.mutation.ClearVideoURL()
	return _u
}

// SetSourceURL sets the "source_url" field.
func (_u *BenefitUpdate) SetSourceURL(v string) *BenefitUpdate {
	_u.mutation.SetSourceURL(v)
	return _u
}

// SetNillableSourceURL sets the "source_url" field if the given value is not nil.
func (_u *BenefitUpdate) SetNillableSourceURL(v *string) *BenefitUpdate {
	if v != nil {
		_u.SetSourceURL(*v)
	}
	return _u
}

// ClearSourceURL clears the value of the "source_url" field.
func (_u *BenefitUpdate) ClearSourceURL() *BenefitUpdate {
	_u.mutation.ClearSourceURL()
	return _u
}

// AddBenefitFilterIDs adds the "benefit_filters" edge to the BenefitFilter entity by IDs.
func (_u *BenefitUpdate) AddBenefitFilterIDs(ids ...int) *BenefitUpdate {
	_u.mutation.AddBenefitFilterIDs(ids...)
	return _u
}

// AddBenefitFilters adds the "benefit_filters" edges to the BenefitFilter entity.
func (_u *BenefitUpdate) AddBenefitFilters(v ...*BenefitFilter) *BenefitUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBenefitFilterIDs(ids...)
}

// AddBenefitCategoryIDs adds the "benefit_categories" edge to the BenefitCategory entity by IDs.
func (_u *BenefitUpdate) AddBenefitCategoryIDs(ids ...int) *BenefitUpdate {
	_u.mutation.AddBenefitCategoryIDs(ids...)
	return _u
}

// AddBenefitCategories adds the "benefit_categories" edges to the BenefitCategory entity.
func (_u *BenefitUpdate) AddBenefitCategories(v ...*BenefitCategory) *BenefitUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBenefitCategoryIDs(ids...)
}

// Mutation returns the BenefitMutation object of the builder.
func (_u *BenefitUpdate) Mutation() *BenefitMutation {
	return _u.mutation
}

// ClearBenefitFilters clears all "benefit_filters" edges to the BenefitFilter entity.
func (_u *BenefitUpdate) ClearBenefitFilters() *BenefitUpdate {
	_u.mutation.ClearBenefitFilters()
	return _u
}

// RemoveBenefitFilterIDs removes the "benefit_filters" edge to BenefitFilter entities by IDs.
func (_u *BenefitUpdate) RemoveBenefitFilterIDs(ids ...int) *BenefitUpdate {
	_u.mutation.RemoveBenefitFilterIDs(ids...)
	return _u
}

// RemoveBenefitFilters removes "benefit_filters" edges to BenefitFilter entities.
func (_u *BenefitUpdate) RemoveBenefitFilters(v ...*BenefitFilter) *BenefitUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBenefitFilterIDs(ids...)
}

// ClearBenefitCategories clears all "benefit_categories" edges to the BenefitCategory entity.
func (_u *BenefitUpdate) ClearBenefitCategories() *BenefitUpdate {
	_u.mutation.ClearBenefitCategories()
	return _u
}

// RemoveBenefitCategoryIDs removes the "benefit_categories" edge to BenefitCategory entities by IDs.
func (_u *BenefitUpdate) RemoveBenefitCategoryIDs(ids ...int) *BenefitUpdate {
	_u.mutation.RemoveBenefitCategoryIDs(ids...)
	return _u
}

// RemoveBenefitCategories removes "benefit_categories" edges to BenefitCategory entities.
func (_u *BenefitUpdate) RemoveBenefitCategories(v ...*BenefitCategory) *BenefitUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBenefitCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *BenefitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BenefitUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *BenefitUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BenefitUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *BenefitUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(benefit.Table, benefit.Columns, sqlgraph.NewFieldSpec(benefit.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(benefit.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(benefit.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Bonus(); ok {
		_spec.SetField(benefit.FieldBonus, field.TypeString, value)
	}
	if value, ok := _u.mutation.VideoURL(); ok {
		_spec.SetField(benefit.FieldVideoURL, field.TypeString, value)
	}
	if _u.mutation.VideoURLCleared() {
		_spec.ClearField(benefit.FieldVideoURL, field.TypeString)
	}
	if value, ok := _u.mutation.SourceURL(); ok {
		_spec.SetField(benefit.FieldSourceURL, field.TypeString, value)
	}
	if _u.mutation.SourceURLCleared() {
		_spec.ClearField(benefit.FieldSourceURL, field.TypeString)
	}
	if _u.mutation.BenefitFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitFiltersTable,
			Columns: []string{benefit.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBenefitFiltersIDs(); len(nodes) > 0 && !_u.mutation.BenefitFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitFiltersTable,
			Columns: []string{benefit.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BenefitFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitFiltersTable,
			Columns: []string{benefit.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BenefitCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitCategoriesTable,
			Columns: []string{benefit.BenefitCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBenefitCategoriesIDs(); len(nodes) > 0 && !_u.mutation.BenefitCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitCategoriesTable,
			Columns: []string{benefit.BenefitCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BenefitCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitCategoriesTable,
			Columns: []string{benefit.BenefitCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{benefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// BenefitUpdateOne is the builder for updating a single Benefit entity.
type BenefitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BenefitMutation
}

// SetTitle sets the "title" field.
func (_u *BenefitUpdateOne) SetTitle(v string) *BenefitUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *BenefitUpdateOne) SetNillableTitle(v *string) *BenefitUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetContent sets the "content" field.
func (_u *BenefitUpdateOne) SetContent(v string) *BenefitUpdateOne {
	_u.mutation.SetContent(v)
	return _u
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (_u *BenefitUpdateOne) SetNillableContent(v *string) *BenefitUpdateOne {
	if v != nil {
		_u.SetContent(*v)
	}
	return _u
}

// SetBonus sets the "bonus" field.
func (_u *BenefitUpdateOne) SetBonus(v string) *BenefitUpdateOne {
	_u.mutation.SetBonus(v)
	return _u
}

// SetNillableBonus sets the "bonus" field if the given value is not nil.
func (_u *BenefitUpdateOne) SetNillableBonus(v *string) *BenefitUpdateOne {
	if v != nil {
		_u.SetBonus(*v)
	}
	return _u
}

// SetVideoURL sets the "video_url" field.
func (_u *BenefitUpdateOne) SetVideoURL(v string) *BenefitUpdateOne {
	_u.mutation.SetVideoURL(v)
	return _u
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (_u *BenefitUpdateOne) SetNillableVideoURL(v *string) *BenefitUpdateOne {
	if v != nil {
		_u.SetVideoURL(*v)
	}
	return _u
}

// ClearVideoURL clears the value of the "video_url" field.
func (_u *BenefitUpdateOne) ClearVideoURL() *BenefitUpdateOne {
	_u.mutation.ClearVideoURL()
	return _u
}

// SetSourceURL sets the "source_url" field.
func (_u *BenefitUpdateOne) SetSourceURL(v string) *BenefitUpdateOne {
	_u.mutation.SetSourceURL(v)
	return _u
}

// SetNillableSourceURL sets the "source_url" field if the given value is not nil.
func (_u *BenefitUpdateOne) SetNillableSourceURL(v *string) *BenefitUpdateOne {
	if v != nil {
		_u.SetSourceURL(*v)
	}
	return _u
}

// ClearSourceURL clears the value of the "source_url" field.
func (_u *BenefitUpdateOne) ClearSourceURL() *BenefitUpdateOne {
	_u.mutation.ClearSourceURL()
	return _u
}

// AddBenefitFilterIDs adds the "benefit_filters" edge to the BenefitFilter entity by IDs.
func (_u *BenefitUpdateOne) AddBenefitFilterIDs(ids ...int) *BenefitUpdateOne {
	_u.mutation.AddBenefitFilterIDs(ids...)
	return _u
}

// AddBenefitFilters adds the "benefit_filters" edges to the BenefitFilter entity.
func (_u *BenefitUpdateOne) AddBenefitFilters(v ...*BenefitFilter) *BenefitUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBenefitFilterIDs(ids...)
}

// AddBenefitCategoryIDs adds the "benefit_categories" edge to the BenefitCategory entity by IDs.
func (_u *BenefitUpdateOne) AddBenefitCategoryIDs(ids ...int) *BenefitUpdateOne {
	_u.mutation.AddBenefitCategoryIDs(ids...)
	return _u
}

// AddBenefitCategories adds the "benefit_categories" edges to the BenefitCategory entity.
func (_u *BenefitUpdateOne) AddBenefitCategories(v ...*BenefitCategory) *BenefitUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBenefitCategoryIDs(ids...)
}

// Mutation returns the BenefitMutation object of the builder.
func (_u *BenefitUpdateOne) Mutation() *BenefitMutation {
	return _u.mutation
}

// ClearBenefitFilters clears all "benefit_filters" edges to the BenefitFilter entity.
func (_u *BenefitUpdateOne) ClearBenefitFilters() *BenefitUpdateOne {
	_u.mutation.ClearBenefitFilters()
	return _u
}

// RemoveBenefitFilterIDs removes the "benefit_filters" edge to BenefitFilter entities by IDs.
func (_u *BenefitUpdateOne) RemoveBenefitFilterIDs(ids ...int) *BenefitUpdateOne {
	_u.mutation.RemoveBenefitFilterIDs(ids...)
	return _u
}

// RemoveBenefitFilters removes "benefit_filters" edges to BenefitFilter entities.
func (_u *BenefitUpdateOne) RemoveBenefitFilters(v ...*BenefitFilter) *BenefitUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBenefitFilterIDs(ids...)
}

// ClearBenefitCategories clears all "benefit_categories" edges to the BenefitCategory entity.
func (_u *BenefitUpdateOne) ClearBenefitCategories() *BenefitUpdateOne {
	_u.mutation.ClearBenefitCategories()
	return _u
}

// RemoveBenefitCategoryIDs removes the "benefit_categories" edge to BenefitCategory entities by IDs.
func (_u *BenefitUpdateOne) RemoveBenefitCategoryIDs(ids ...int) *BenefitUpdateOne {
	_u.mutation.RemoveBenefitCategoryIDs(ids...)
	return _u
}

// RemoveBenefitCategories removes "benefit_categories" edges to BenefitCategory entities.
func (_u *BenefitUpdateOne) RemoveBenefitCategories(v ...*BenefitCategory) *BenefitUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBenefitCategoryIDs(ids...)
}

// Where appends a list predicates to the BenefitUpdate builder.
func (_u *BenefitUpdateOne) Where(ps ...predicate.Benefit) *BenefitUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *BenefitUpdateOne) Select(field string, fields ...string) *BenefitUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Benefit entity.
func (_u *BenefitUpdateOne) Save(ctx context.Context) (*Benefit, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *BenefitUpdateOne) SaveX(ctx context.Context) *Benefit {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *BenefitUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *BenefitUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *BenefitUpdateOne) sqlSave(ctx context.Context) (_node *Benefit, err error) {
	_spec := sqlgraph.NewUpdateSpec(benefit.Table, benefit.Columns, sqlgraph.NewFieldSpec(benefit.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Benefit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, benefit.FieldID)
		for _, f := range fields {
			if !benefit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != benefit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(benefit.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Content(); ok {
		_spec.SetField(benefit.FieldContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Bonus(); ok {
		_spec.SetField(benefit.FieldBonus, field.TypeString, value)
	}
	if value, ok := _u.mutation.VideoURL(); ok {
		_spec.SetField(benefit.FieldVideoURL, field.TypeString, value)
	}
	if _u.mutation.VideoURLCleared() {
		_spec.ClearField(benefit.FieldVideoURL, field.TypeString)
	}
	if value, ok := _u.mutation.SourceURL(); ok {
		_spec.SetField(benefit.FieldSourceURL, field.TypeString, value)
	}
	if _u.mutation.SourceURLCleared() {
		_spec.ClearField(benefit.FieldSourceURL, field.TypeString)
	}
	if _u.mutation.BenefitFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitFiltersTable,
			Columns: []string{benefit.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBenefitFiltersIDs(); len(nodes) > 0 && !_u.mutation.BenefitFiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitFiltersTable,
			Columns: []string{benefit.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BenefitFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitFiltersTable,
			Columns: []string{benefit.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BenefitCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitCategoriesTable,
			Columns: []string{benefit.BenefitCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBenefitCategoriesIDs(); len(nodes) > 0 && !_u.mutation.BenefitCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitCategoriesTable,
			Columns: []string{benefit.BenefitCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BenefitCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitCategoriesTable,
			Columns: []string{benefit.BenefitCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Benefit{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{benefit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
