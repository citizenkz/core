// Code generated by ent, DO NOT EDIT.

package userfilter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userfilter type in the database.
	Label = "user_filter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldFilterID holds the string denoting the filter_id field in the database.
	FieldFilterID = "filter_id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeFilter holds the string denoting the filter edge name in mutations.
	EdgeFilter = "filter"
	// Table holds the table name of the userfilter in the database.
	Table = "user_filters"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_filters"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// FilterTable is the table that holds the filter relation/edge.
	FilterTable = "user_filters"
	// FilterInverseTable is the table name for the Filter entity.
	// It exists in this package in order to avoid circular dependency with the "filter" package.
	FilterInverseTable = "filters"
	// FilterColumn is the table column denoting the filter relation/edge.
	FilterColumn = "filter_id"
)

// Columns holds all SQL columns for userfilter fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldFilterID,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserFilter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByFilterID orders the results by the filter_id field.
func ByFilterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilterID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByFilterField orders the results by filter field.
func ByFilterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilterStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newFilterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FilterTable, FilterColumn),
	)
}
