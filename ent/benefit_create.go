// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/citizenkz/core/ent/benefit"
	"github.com/citizenkz/core/ent/benefitcategory"
	"github.com/citizenkz/core/ent/benefitfilter"
)

// BenefitCreate is the builder for creating a Benefit entity.
type BenefitCreate struct {
	config
	mutation *BenefitMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (_c *BenefitCreate) SetTitle(v string) *BenefitCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetContent sets the "content" field.
func (_c *BenefitCreate) SetContent(v string) *BenefitCreate {
	_c.mutation.SetContent(v)
	return _c
}

// SetBonus sets the "bonus" field.
func (_c *BenefitCreate) SetBonus(v string) *BenefitCreate {
	_c.mutation.SetBonus(v)
	return _c
}

// SetVideoURL sets the "video_url" field.
func (_c *BenefitCreate) SetVideoURL(v string) *BenefitCreate {
	_c.mutation.SetVideoURL(v)
	return _c
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (_c *BenefitCreate) SetNillableVideoURL(v *string) *BenefitCreate {
	if v != nil {
		_c.SetVideoURL(*v)
	}
	return _c
}

// SetSourceURL sets the "source_url" field.
func (_c *BenefitCreate) SetSourceURL(v string) *BenefitCreate {
	_c.mutation.SetSourceURL(v)
	return _c
}

// SetNillableSourceURL sets the "source_url" field if the given value is not nil.
func (_c *BenefitCreate) SetNillableSourceURL(v *string) *BenefitCreate {
	if v != nil {
		_c.SetSourceURL(*v)
	}
	return _c
}

// AddBenefitFilterIDs adds the "benefit_filters" edge to the BenefitFilter entity by IDs.
func (_c *BenefitCreate) AddBenefitFilterIDs(ids ...int) *BenefitCreate {
	_c.mutation.AddBenefitFilterIDs(ids...)
	return _c
}

// AddBenefitFilters adds the "benefit_filters" edges to the BenefitFilter entity.
func (_c *BenefitCreate) AddBenefitFilters(v ...*BenefitFilter) *BenefitCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBenefitFilterIDs(ids...)
}

// AddBenefitCategoryIDs adds the "benefit_categories" edge to the BenefitCategory entity by IDs.
func (_c *BenefitCreate) AddBenefitCategoryIDs(ids ...int) *BenefitCreate {
	_c.mutation.AddBenefitCategoryIDs(ids...)
	return _c
}

// AddBenefitCategories adds the "benefit_categories" edges to the BenefitCategory entity.
func (_c *BenefitCreate) AddBenefitCategories(v ...*BenefitCategory) *BenefitCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBenefitCategoryIDs(ids...)
}

// Mutation returns the BenefitMutation object of the builder.
func (_c *BenefitCreate) Mutation() *BenefitMutation {
	return _c.mutation
}

// Save creates the Benefit in the database.
func (_c *BenefitCreate) Save(ctx context.Context) (*Benefit, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *BenefitCreate) SaveX(ctx context.Context) *Benefit {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BenefitCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BenefitCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *BenefitCreate) check() error {
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Benefit.title"`)}
	}
	if _, ok := _c.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Benefit.content"`)}
	}
	if _, ok := _c.mutation.Bonus(); !ok {
		return &ValidationError{Name: "bonus", err: errors.New(`ent: missing required field "Benefit.bonus"`)}
	}
	return nil
}

func (_c *BenefitCreate) sqlSave(ctx context.Context) (*Benefit, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *BenefitCreate) createSpec() (*Benefit, *sqlgraph.CreateSpec) {
	var (
		_node = &Benefit{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(benefit.Table, sqlgraph.NewFieldSpec(benefit.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(benefit.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Content(); ok {
		_spec.SetField(benefit.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := _c.mutation.Bonus(); ok {
		_spec.SetField(benefit.FieldBonus, field.TypeString, value)
		_node.Bonus = value
	}
	if value, ok := _c.mutation.VideoURL(); ok {
		_spec.SetField(benefit.FieldVideoURL, field.TypeString, value)
		_node.VideoURL = &value
	}
	if value, ok := _c.mutation.SourceURL(); ok {
		_spec.SetField(benefit.FieldSourceURL, field.TypeString, value)
		_node.SourceURL = &value
	}
	if nodes := _c.mutation.BenefitFiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitFiltersTable,
			Columns: []string{benefit.BenefitFiltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitfilter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BenefitCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   benefit.BenefitCategoriesTable,
			Columns: []string{benefit.BenefitCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(benefitcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BenefitCreateBulk is the builder for creating many Benefit entities in bulk.
type BenefitCreateBulk struct {
	config
	err      error
	builders []*BenefitCreate
}

// Save creates the Benefit entities in the database.
func (_c *BenefitCreateBulk) Save(ctx context.Context) ([]*Benefit, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Benefit, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BenefitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *BenefitCreateBulk) SaveX(ctx context.Context) []*Benefit {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *BenefitCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *BenefitCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
