// Code generated by ent, DO NOT EDIT.

package benefit

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the benefit type in the database.
	Label = "benefit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldBonus holds the string denoting the bonus field in the database.
	FieldBonus = "bonus"
	// FieldVideoURL holds the string denoting the video_url field in the database.
	FieldVideoURL = "video_url"
	// FieldSourceURL holds the string denoting the source_url field in the database.
	FieldSourceURL = "source_url"
	// EdgeBenefitFilters holds the string denoting the benefit_filters edge name in mutations.
	EdgeBenefitFilters = "benefit_filters"
	// EdgeBenefitCategories holds the string denoting the benefit_categories edge name in mutations.
	EdgeBenefitCategories = "benefit_categories"
	// Table holds the table name of the benefit in the database.
	Table = "benefits"
	// BenefitFiltersTable is the table that holds the benefit_filters relation/edge.
	BenefitFiltersTable = "benefit_filters"
	// BenefitFiltersInverseTable is the table name for the BenefitFilter entity.
	// It exists in this package in order to avoid circular dependency with the "benefitfilter" package.
	BenefitFiltersInverseTable = "benefit_filters"
	// BenefitFiltersColumn is the table column denoting the benefit_filters relation/edge.
	BenefitFiltersColumn = "benefit_id"
	// BenefitCategoriesTable is the table that holds the benefit_categories relation/edge.
	BenefitCategoriesTable = "benefit_categories"
	// BenefitCategoriesInverseTable is the table name for the BenefitCategory entity.
	// It exists in this package in order to avoid circular dependency with the "benefitcategory" package.
	BenefitCategoriesInverseTable = "benefit_categories"
	// BenefitCategoriesColumn is the table column denoting the benefit_categories relation/edge.
	BenefitCategoriesColumn = "benefit_id"
)

// Columns holds all SQL columns for benefit fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldContent,
	FieldBonus,
	FieldVideoURL,
	FieldSourceURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Benefit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByBonus orders the results by the bonus field.
func ByBonus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBonus, opts...).ToFunc()
}

// ByVideoURL orders the results by the video_url field.
func ByVideoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoURL, opts...).ToFunc()
}

// BySourceURL orders the results by the source_url field.
func BySourceURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceURL, opts...).ToFunc()
}

// ByBenefitFiltersCount orders the results by benefit_filters count.
func ByBenefitFiltersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBenefitFiltersStep(), opts...)
	}
}

// ByBenefitFilters orders the results by benefit_filters terms.
func ByBenefitFilters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBenefitFiltersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBenefitCategoriesCount orders the results by benefit_categories count.
func ByBenefitCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBenefitCategoriesStep(), opts...)
	}
}

// ByBenefitCategories orders the results by benefit_categories terms.
func ByBenefitCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBenefitCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBenefitFiltersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BenefitFiltersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BenefitFiltersTable, BenefitFiltersColumn),
	)
}
func newBenefitCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BenefitCategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BenefitCategoriesTable, BenefitCategoriesColumn),
	)
}
