// Code generated by ent, DO NOT EDIT.

package benefit

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/citizenkz/core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Benefit {
	return predicate.Benefit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Benefit {
	return predicate.Benefit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Benefit {
	return predicate.Benefit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Benefit {
	return predicate.Benefit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Benefit {
	return predicate.Benefit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Benefit {
	return predicate.Benefit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Benefit {
	return predicate.Benefit(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldContent, v))
}

// Bonus applies equality check predicate on the "bonus" field. It's identical to BonusEQ.
func Bonus(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldBonus, v))
}

// VideoURL applies equality check predicate on the "video_url" field. It's identical to VideoURLEQ.
func VideoURL(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldVideoURL, v))
}

// SourceURL applies equality check predicate on the "source_url" field. It's identical to SourceURLEQ.
func SourceURL(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldSourceURL, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Benefit {
	return predicate.Benefit(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Benefit {
	return predicate.Benefit(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Benefit {
	return predicate.Benefit(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Benefit {
	return predicate.Benefit(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldContainsFold(FieldContent, v))
}

// BonusEQ applies the EQ predicate on the "bonus" field.
func BonusEQ(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldBonus, v))
}

// BonusNEQ applies the NEQ predicate on the "bonus" field.
func BonusNEQ(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldNEQ(FieldBonus, v))
}

// BonusIn applies the In predicate on the "bonus" field.
func BonusIn(vs ...string) predicate.Benefit {
	return predicate.Benefit(sql.FieldIn(FieldBonus, vs...))
}

// BonusNotIn applies the NotIn predicate on the "bonus" field.
func BonusNotIn(vs ...string) predicate.Benefit {
	return predicate.Benefit(sql.FieldNotIn(FieldBonus, vs...))
}

// BonusGT applies the GT predicate on the "bonus" field.
func BonusGT(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldGT(FieldBonus, v))
}

// BonusGTE applies the GTE predicate on the "bonus" field.
func BonusGTE(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldGTE(FieldBonus, v))
}

// BonusLT applies the LT predicate on the "bonus" field.
func BonusLT(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldLT(FieldBonus, v))
}

// BonusLTE applies the LTE predicate on the "bonus" field.
func BonusLTE(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldLTE(FieldBonus, v))
}

// BonusContains applies the Contains predicate on the "bonus" field.
func BonusContains(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldContains(FieldBonus, v))
}

// BonusHasPrefix applies the HasPrefix predicate on the "bonus" field.
func BonusHasPrefix(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldHasPrefix(FieldBonus, v))
}

// BonusHasSuffix applies the HasSuffix predicate on the "bonus" field.
func BonusHasSuffix(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldHasSuffix(FieldBonus, v))
}

// BonusEqualFold applies the EqualFold predicate on the "bonus" field.
func BonusEqualFold(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEqualFold(FieldBonus, v))
}

// BonusContainsFold applies the ContainsFold predicate on the "bonus" field.
func BonusContainsFold(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldContainsFold(FieldBonus, v))
}

// VideoURLEQ applies the EQ predicate on the "video_url" field.
func VideoURLEQ(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldVideoURL, v))
}

// VideoURLNEQ applies the NEQ predicate on the "video_url" field.
func VideoURLNEQ(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldNEQ(FieldVideoURL, v))
}

// VideoURLIn applies the In predicate on the "video_url" field.
func VideoURLIn(vs ...string) predicate.Benefit {
	return predicate.Benefit(sql.FieldIn(FieldVideoURL, vs...))
}

// VideoURLNotIn applies the NotIn predicate on the "video_url" field.
func VideoURLNotIn(vs ...string) predicate.Benefit {
	return predicate.Benefit(sql.FieldNotIn(FieldVideoURL, vs...))
}

// VideoURLGT applies the GT predicate on the "video_url" field.
func VideoURLGT(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldGT(FieldVideoURL, v))
}

// VideoURLGTE applies the GTE predicate on the "video_url" field.
func VideoURLGTE(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldGTE(FieldVideoURL, v))
}

// VideoURLLT applies the LT predicate on the "video_url" field.
func VideoURLLT(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldLT(FieldVideoURL, v))
}

// VideoURLLTE applies the LTE predicate on the "video_url" field.
func VideoURLLTE(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldLTE(FieldVideoURL, v))
}

// VideoURLContains applies the Contains predicate on the "video_url" field.
func VideoURLContains(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldContains(FieldVideoURL, v))
}

// VideoURLHasPrefix applies the HasPrefix predicate on the "video_url" field.
func VideoURLHasPrefix(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldHasPrefix(FieldVideoURL, v))
}

// VideoURLHasSuffix applies the HasSuffix predicate on the "video_url" field.
func VideoURLHasSuffix(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldHasSuffix(FieldVideoURL, v))
}

// VideoURLIsNil applies the IsNil predicate on the "video_url" field.
func VideoURLIsNil() predicate.Benefit {
	return predicate.Benefit(sql.FieldIsNull(FieldVideoURL))
}

// VideoURLNotNil applies the NotNil predicate on the "video_url" field.
func VideoURLNotNil() predicate.Benefit {
	return predicate.Benefit(sql.FieldNotNull(FieldVideoURL))
}

// VideoURLEqualFold applies the EqualFold predicate on the "video_url" field.
func VideoURLEqualFold(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEqualFold(FieldVideoURL, v))
}

// VideoURLContainsFold applies the ContainsFold predicate on the "video_url" field.
func VideoURLContainsFold(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldContainsFold(FieldVideoURL, v))
}

// SourceURLEQ applies the EQ predicate on the "source_url" field.
func SourceURLEQ(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEQ(FieldSourceURL, v))
}

// SourceURLNEQ applies the NEQ predicate on the "source_url" field.
func SourceURLNEQ(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldNEQ(FieldSourceURL, v))
}

// SourceURLIn applies the In predicate on the "source_url" field.
func SourceURLIn(vs ...string) predicate.Benefit {
	return predicate.Benefit(sql.FieldIn(FieldSourceURL, vs...))
}

// SourceURLNotIn applies the NotIn predicate on the "source_url" field.
func SourceURLNotIn(vs ...string) predicate.Benefit {
	return predicate.Benefit(sql.FieldNotIn(FieldSourceURL, vs...))
}

// SourceURLGT applies the GT predicate on the "source_url" field.
func SourceURLGT(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldGT(FieldSourceURL, v))
}

// SourceURLGTE applies the GTE predicate on the "source_url" field.
func SourceURLGTE(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldGTE(FieldSourceURL, v))
}

// SourceURLLT applies the LT predicate on the "source_url" field.
func SourceURLLT(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldLT(FieldSourceURL, v))
}

// SourceURLLTE applies the LTE predicate on the "source_url" field.
func SourceURLLTE(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldLTE(FieldSourceURL, v))
}

// SourceURLContains applies the Contains predicate on the "source_url" field.
func SourceURLContains(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldContains(FieldSourceURL, v))
}

// SourceURLHasPrefix applies the HasPrefix predicate on the "source_url" field.
func SourceURLHasPrefix(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldHasPrefix(FieldSourceURL, v))
}

// SourceURLHasSuffix applies the HasSuffix predicate on the "source_url" field.
func SourceURLHasSuffix(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldHasSuffix(FieldSourceURL, v))
}

// SourceURLIsNil applies the IsNil predicate on the "source_url" field.
func SourceURLIsNil() predicate.Benefit {
	return predicate.Benefit(sql.FieldIsNull(FieldSourceURL))
}

// SourceURLNotNil applies the NotNil predicate on the "source_url" field.
func SourceURLNotNil() predicate.Benefit {
	return predicate.Benefit(sql.FieldNotNull(FieldSourceURL))
}

// SourceURLEqualFold applies the EqualFold predicate on the "source_url" field.
func SourceURLEqualFold(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldEqualFold(FieldSourceURL, v))
}

// SourceURLContainsFold applies the ContainsFold predicate on the "source_url" field.
func SourceURLContainsFold(v string) predicate.Benefit {
	return predicate.Benefit(sql.FieldContainsFold(FieldSourceURL, v))
}

// HasBenefitFilters applies the HasEdge predicate on the "benefit_filters" edge.
func HasBenefitFilters() predicate.Benefit {
	return predicate.Benefit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BenefitFiltersTable, BenefitFiltersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBenefitFiltersWith applies the HasEdge predicate on the "benefit_filters" edge with a given conditions (other predicates).
func HasBenefitFiltersWith(preds ...predicate.BenefitFilter) predicate.Benefit {
	return predicate.Benefit(func(s *sql.Selector) {
		step := newBenefitFiltersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBenefitCategories applies the HasEdge predicate on the "benefit_categories" edge.
func HasBenefitCategories() predicate.Benefit {
	return predicate.Benefit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BenefitCategoriesTable, BenefitCategoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBenefitCategoriesWith applies the HasEdge predicate on the "benefit_categories" edge with a given conditions (other predicates).
func HasBenefitCategoriesWith(preds ...predicate.BenefitCategory) predicate.Benefit {
	return predicate.Benefit(func(s *sql.Selector) {
		step := newBenefitCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Benefit) predicate.Benefit {
	return predicate.Benefit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Benefit) predicate.Benefit {
	return predicate.Benefit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Benefit) predicate.Benefit {
	return predicate.Benefit(sql.NotPredicates(p))
}
